(* Test constructors *)

Print["* TESTING CONSTRUCTORS -- BEGIN"];

(* Graded Constructor *)

Clear[x, y, z]
vars = {{x, y}, {z}};
coeff1 = {1, 2, 3, -1, -2, -3, 1/2};
mon1 = {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}};
p1 = NCPoly[coeff1, mon1, vars];

Test[NCPolyGetCoefficients[p1], {1, 2, -1, -2, 3, -3, 1/2}];
Test[NCPolyDegree[p1], 4];
Test[NCPolyGetDigits[p1], \
     {{}, {0}, {0, 1}, {0, 1, 0, 0}, {2}, {2, 0}, {2, 2, 2, 2}}];

coeff2 = {1,     0,   2,   3,    -1,        -2,   -3,     0,          1/2};
mon2 = { {}, {x,x}, {x}, {z}, {x,y}, {x,y,x,x}, {z,x}, {y,z}, {z, z, z, z}};
p2 = NCPoly[coeff2, mon2, vars];

Test[NCPolyGetCoefficients[p2], {1, 2, -1, -2, 3, -3, 1/2}];
Test[NCPolyDegree[p2], 4];
Test[NCPolyGetDigits[p2], \
     {{}, {0}, {0, 1}, {0, 1, 0, 0}, {2}, {2, 0}, {2, 2, 2, 2}}];

(* Standard Constructor *)

coeff3 = {1, 2, 3, -1, -2, -3, 1/2};
mon3 = {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}};
p3 = NCPoly[coeff3, mon3, Flatten[vars]];

(* Monomial Constructos *)

m0 = NCPolyConstant[3, {2,1}];
Test[NCPolyGetCoefficients[m0], {3}];
Test[NCPolyGetDigits[m0], {{}}];

m1 = NCPolyMonomial[{}, 3];
Test[m1, 1];

m1 = NCPolyMonomial[{}, {3}];
Test[m1, 1];

m1 = NCPolyMonomial[{}, {2,1}];
Test[m1, 1];

m2 = NCPolyMonomial[{0, 1, 2, 1}, {2, 1}];
Test[NCPolyLeadingTerm[m2], {4, 16} -> 1];
Test[NCPolyGetDigits[m2], {{0,1,2,1}}];
Test[NCPolyGetCoefficients[m2], {1}];

m2 = NCPolyMonomial[{a, b, c, b}, {{a, b}, {c}}];
Test[NCPolyLeadingTerm[m2], {4, 16} -> 1];
Test[NCPolyGetCoefficients[m2], {1}];
Test[NCPolyGetDigits[m2], {{0,1,2,1}}];

m3 = NCPolyMonomial[{4, 16} -> 1, 3];
Test[NCPolyLeadingTerm[m3], {4, 16} -> 1];
Test[NCPolyGetCoefficients[m3], {1}];
Test[NCPolyGetDigits[m3], {{0,1,2,1}}];

m4 = NCPolyMonomial[{4, 16} -> 1, 3];
Test[NCPolyLeadingTerm[m4], {4, 16} -> 1];
Test[NCPolyGetCoefficients[m4], {1}];
Test[NCPolyGetDigits[m4], {{0,1,2,1}}];

m3 = NCPolyMonomial[{4, 16} -> 1, {3}];
Test[NCPolyLeadingTerm[m3], {4, 16} -> 1];
Test[NCPolyGetCoefficients[m3], {1}];
Test[NCPolyGetDigits[m3], {{0,1,2,1}}];

m4 = NCPolyMonomial[{4, 16} -> 1, {3}];
Test[NCPolyLeadingTerm[m4], {4, 16} -> 1];
Test[NCPolyGetCoefficients[m4], {1}];
Test[NCPolyGetDigits[m4], {{0,1,2,1}}];

m3 = NCPolyMonomial[{1, 3, 16} -> 1, {2,1}];
Test[NCPolyLeadingTerm[m3], {4, 16} -> 1];
Test[NCPolyGetCoefficients[m3], {1}];
Test[NCPolyGetDigits[m3], {{0,1,2,1}}];

m4 = NCPolyMonomial[{4, 16} -> 1, {2,1}];
Test[NCPolyLeadingTerm[m4], {4, 16} -> 1];
Test[NCPolyGetCoefficients[m4], {1}];
Test[NCPolyGetDigits[m4], {{0,1,2,1}}];

m5 = NCPolyMonomial[{0, 0} -> -1, 3];
Test[NCPolyLeadingTerm[m5], {0, 0} -> -1];
Test[NCPolyGetCoefficients[m5], {-1}];
Test[NCPolyGetDigits[m5], {{}}];

m5 = NCPolyMonomial[{0, 0} -> -1, {3}];
Test[NCPolyLeadingTerm[m5], {0, 0} -> -1];
Test[NCPolyGetCoefficients[m5], {-1}];
Test[NCPolyGetDigits[m5], {{}}];

m5 = NCPolyMonomial[{0, 0} -> -1, {2,1}];
Test[NCPolyLeadingTerm[m5], {0, 0} -> -1];
Test[NCPolyGetCoefficients[m5], {-1}];
Test[NCPolyGetDigits[m5], {{}}];

(* Some utilities *)

Test[NCPolyLeadingTerm[p1], {4, 80} -> 1/2];
Test[NCPolyLeadingTerm[p1, 1], {4, 80} -> 1/2];
Test[NCPolyLeadingTerm[p1, 2], {2, 6} -> -3];
Test[NCPolyLeadingTerm[p1, 4], {4, 9} -> -2];
Test[NCPolyLeadingTerm[p1, 8], $Failed];

Test[NCPolyMonomialQ[p1], False];
Test[NCPolyMonomialQ[p2], False];
Test[NCPolyMonomialQ[m2], True];
Test[NCPolyMonomialQ[m3], True];
Test[NCPolyMonomialQ[m4], True];
Test[NCPolyMonomialQ[m5], True];

(* Sorting *)

mSorted = { 
  NCPolyMonomial[{0}, 3], 
  NCPolyMonomial[{2}, 3],
  NCPolyMonomial[{0,2}, 3], 
  NCPolyMonomial[{2,1}, 3],
  NCPolyMonomial[{2,1,2}, 3],
  NCPolyMonomial[{2,2,1}, 3]
};
mUnsorted = mSorted[[RandomSample[Range[1, Length[mSorted]]]]];
Test[mSorted === Sort[mUnsorted], True];

(* mUnsorted = mSorted \
          + mSorted[[RandomSample[Range[1, Length[mSorted]]]]];
mUnsortedLeading = Map[NCPolyLeadingMonomial, mUnsorted];
Test[Sort[mUnsortedLeading] - Map[NCPolyLeadingMonomial, Sort[mUnsorted]], zM];
*)

Test[mSorted[[1]] > mSorted[[2]], False];
Test[mSorted[[2]] > mSorted[[1]], True];


(* Fancy Display *)

Print["* Check these expressions:"];
Print[NCPolyDisplay[p1, vars]];
Print[NCPolyDisplay[p2, vars]];
Print[NCPolyDisplay[m2, vars]];
Print[NCPolyDisplay[m3, vars]];
Print[NCPolyDisplay[m4, vars]];
Print[NCPolyDisplay[m5, vars]];

(* Fancy Display w/ default symbols *)

Print[NCPolyDisplay[p1]];
Print[NCPolyDisplay[p2]];

Print["* TESTING CONSTRUCTORS -- END"];
