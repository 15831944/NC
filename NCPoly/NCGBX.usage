(*************************************************************************
 *         This file was automatically generated by md2usage.py          *
 *                   on 2016-10-29 08:52:56.070796                       *
 *************************************************************************)


(* SetMonomialOrder *)
SetMonomialOrder::usage = "\
";

(* NCRuleToPoly *)
NCRuleToPoly::usage = "\
";

(* ClearMonomialOrder *)
ClearMonomialOrder::usage = "\
";

(* NCPolyToNC *)
NCPolyToNC::usage = "\
NCPolyToNC[poly, vars] constructs an nc expression from the noncommutative polynomial object poly in variables vars. Monomials are specified in terms of the symbols in the list var.

For example

    poly = NCToNCPoly[x**y - 2 y**z, {x, y, z}];
    expr = NCPolyToNC[poly, {x, y, z}];

returns

    expr = x**y - 2 y**z

See also: NCPolyToNC, NCPoly.";

(* NCReduce *)
NCReduce::usage = "\
";

(* GetMonomialOrder *)
GetMonomialOrder::usage = "\
";

(* NCToNCPoly *)
NCToNCPoly::usage = "\
NCToNCPoly[expr, var] constructs a noncommutative polynomial object in variables var from the nc expression expr.

For example

    NCToNCPoly[x**y - 2 y**z, {x, y, z}] 

constructs an object associated with the noncommutative polynomial xy − 2yz in variables x, y and z. The internal representation is so that the terms are sorted according to a degree-lexicographic order in vars. In the above example, x < y < z.";

(* SetKnowns *)
SetKnowns::usage = "\
";

(* NCMakeGB *)
NCMakeGB::usage = "\
";
