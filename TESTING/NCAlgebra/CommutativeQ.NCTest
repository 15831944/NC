Block[
  {k,i,j,
   exp1,exp2,
   pattern1,pattern2,pattern3,pattern4,
   $zzzz,$yyyy},

  (* History:  Nov 2015: CommutativeQ test (mauricio) *)

  (* Test SNC *)

  Clear[$zzzz,$yyyy];
  SetNonCommutative[$zzzz];

  NCTest[CommutativeQ[$zzzz], False];
  NCTest[CommutativeQ[$yyyy], True];

  Clear[$zzzz,$yyyy];

  NCTest[CommutativeQ[$zzzz], True];
  NCTest[CommutativeQ[$yyyy], True];

  SetNonCommutative[$zzzz];

  NCTest[CommutativeQ[$zzzz], False];
  NCTest[CommutativeQ[$yyyy], True];

  NCTest[CommutativeQ[$zzzz[1]], False];
  NCTest[CommutativeQ[$zzzz[$zzzz]], False];
  NCTest[CommutativeQ[$zzzz[$yyyy]], False];

  NCTest[CommutativeQ[$yyyy[1]], True];
  NCTest[CommutativeQ[$yyyy[$yyyy]], True];
  NCTest[CommutativeQ[$yyyy[$zzzz]], False];

  NCTest[CommutativeQ[$yyyy[1,$yyyy]], True];
  NCTest[CommutativeQ[$yyyy[1,$zzzz]], False];

  Clear[$zzzz,$yyyy];

  (* Test rule *)

  Clear[$zzzz];
  SetNonCommutative[$zzzz];

  pattern1=$zzzz_**b_->b**$zzzz;
  exp1=x**y+x**y**y;
  NCTest[(exp1/.pattern1), y**x+x**y**y];

  $zzzz=2;
  exp1=x**y+x**y**y;
  NCTest[(exp1/.pattern1), 2y+x**y**y];

  exp2=y**x+x**y**y;
  NCTest[(exp2/.pattern1), 2x+x**y**y];

  pattern2=_**b_->b;
  NCTest[(exp1/.pattern2), y+x**y**y];
  NCTest[(exp2/.pattern2), x+x**y**y];

  pattern3=__**b_->b;
  NCTest[(exp1/.pattern3), 2y];
  NCTest[(exp2/.pattern3), x+y];

  pattern4=__**b_->b;
  NCTest[(exp1/.pattern4), 2y];
  NCTest[(exp2/.pattern4), x+y];

  Clear[$zzzz];

  (* Test delayed rule *)

  Clear[$zzzz];
  SNC[$zzzz];

  pattern1=$zzzz_**b_:>b**$zzzz;
  exp1=x**y+x**y**y;
  NCTest[(exp1/.pattern1), y**x+x**y**y];

  $zzzz=2;
  exp1=x**y+x**y**y;
  NCTest[(exp1/.pattern1), y**x+x**y**y];

  exp2=y**x+x**y**y;
  NCTest[(exp2/.pattern1), x**y+x**y**y];

  pattern2=_**b_:>b;
  NCTest[(exp1/.pattern2), y+x**y**y];
  NCTest[(exp2/.pattern2), x+x**y**y];

  pattern3=__**b_:>b;
  NCTest[(exp1/.pattern3), 2y];
  NCTest[(exp2/.pattern3), x+y];

  pattern4=__**b_:>b;
  NCTest[(exp1/.pattern4), 2y];
  NCTest[(exp2/.pattern4), x+y];

  Clear[$zzzz];

  (* Test exceptions *)
  
  NCTestCheck[SetNonCommutative[1],
              CommutativeQ::NonCommutativeSubscript];
  NCTestCheck[SetNonCommutative[Subscript[$zzzz,1]],
              CommutativeQ::NonCommutativeSubscript];
  NCTestCheck[SetNonCommutative[f[x]],
              CommutativeQ::NonCommutativeSubscript];
  NCTestCheck[SetNonCommutative[x + y],
              CommutativeQ::NonCommutativeSubscript];

  NCTestCheck[SetCommutative[1],
              CommutativeQ::CommutativeSubscript];
  NCTestCheck[SetCommutative[Subscript[$zzzz,1]],
              CommutativeQ::CommutativeSubscript];
  NCTestCheck[SetCommutative[f[x]],
              CommutativeQ::CommutativeSubscript];
  NCTestCheck[SetCommutative[x + y],
              CommutativeQ::CommutativeSubscript];

  (* Test subscripts *)
  SetNonCommutative[$zzzz];

  NCCheck[NonCommutativeQ[$zzzz], True];
  NCCheck[NonCommutativeQ[Subscript[$zzzz,1]], True];
  NCCheck[NonCommutativeQ[Subscript[$zzzz,1,2]], True];

  SetCommutative[$zzzz];

  NCCheck[CommutativeQ[$zzzz], True];
  NCCheck[CommutativeQ[Subscript[$zzzz,1]], True];
  NCCheck[CommutativeQ[Subscript[$zzzz,1,2]], True];

  Clear[$zzzz];
  
];