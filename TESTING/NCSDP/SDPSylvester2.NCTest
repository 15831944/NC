<< Sylvester`
<< SDPSylvester`

Module[
  {test, k, exp, answer,
   A,B,Q,
   AA,BB,CC,
   AAv,BBv,CCv, y,
   Y,syms,tmp,
   x1,X1,XX1,
   Y1,Y11,
   P2,Q2,H2,
   dims,
   H11,
   XX2,XX3,
   n,m,Id,Ze,Idm,Zemm,Zenm,Idx,IdW,Zenpm,
   X,L,W,
   FvDualEval, FvPrimalEval, 
   FvSylvesterEval, FvSylvesterDiagonalEval,	
   FvSylvesterSolve, FvSylvesterSolveFactored,
   FDualEval, FPrimalEval, 
   FSylvesterEval, FSylvesterDiagonalEval, 
   FSylvesterSolve, FSylvesterSolveFactored
  },

  k = 1;
  test = "SDPSylvester2";

  A={{-1,1},{0,-2}};
  B={{2,1},{1,2}};
  Q=IdentityMatrix[2];

  (* Test #1 *)

  AA={
  {
  {ArrayFlatten[{{Transpose[A],B}}],ArrayFlatten[{{Transpose[B],A}}]}
  }
  };
  CC={-Q};
  BB={IdentityMatrix[2]};

  Y={{1,3},{3,2}};
  syms = {True};
  dims=Map[Dimensions,{Y}];

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}, SymmetricVariables->{1}];

  answer = {{{{-4, 1}, {1, 2}}}, {{{-2, -5}, {-5, 0}}}, {{{0, -2}, {-2, -8}}}};
  exp = Abs[Total[AAv-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  answer = {{{1, 0, 1}}};
  exp = Abs[Total[BBv-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  answer = CC;
  exp = Abs[Total[CCv-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  y = SymmetricToVector[Y];
  answer = SDPPrimalEval[AAv, y];
  X1=SylvesterPrimalEval[AA,{Y}];

  exp = Abs[Total[X1-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}];

  answer = {{{{-4, 1}, {1, 2}}}, {{{-1, -5/2}, {-5/2, 0}}}, {{{-1, -5/2}, {-5/2, 0}}}, {{{0, -2}, {-2, -8}}}};
  exp = Abs[Total[AAv-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  answer = {{{1, 0, 0, 1}}};
  exp = Abs[Total[BBv-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  y = ToVector[Y];
  answer = SDPPrimalEval[AAv, y];
  X1=SylvesterPrimalEval[AA,{Y}];

  exp = Abs[Total[X1-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  {XX1}=X1;

  answer = SDPDualEval[AAv, X1];
  Y1=SylvesterDualEval[AA,{XX1},syms];

  exp = Abs[Total[ToVector[Y1[[1]]]-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  X11 = MapThread[Dot, {X1,X1}];

  answer=SDPSylvesterEval[AAv,X11];
  H1=SylvesterSylvesterVecEval[AA,X11,dims,syms];
  scl = Norm[H1];

  exp = Abs[Total[H1-answer, Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  P2 = {{1, 0, 0, 0}, {0, 1/2, 1/2, 0}, {0, 0, 0, 1}};
  Q2 = Transpose[P2].Inverse[P2.Transpose[P2]];

  H2 = SylvesterSylvesterVecEval[AA, X11, dims, syms, True];

  exp = Abs[Total[Transpose[Q2] . H1 . Q2 - H2, Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  << SDP`;

  {FvDualEval, FvPrimalEval, 
   FvSylvesterEval, FvSylvesterDiagonalEval,	
    FvSylvesterSolve, FvSylvesterSolveFactored} = SDPFunctions[{AAv, BBv, CCv}];

  << SDPSylvester`;

  {FDualEval, FPrimalEval, 
   FSylvesterEval, FSylvesterDiagonalEval, 
    FSylvesterSolve, FSylvesterSolveFactored} = SDPFunctions[AA, BB, CC, syms];

  Fv = FvPrimalEval @@ {{y}};
  FF = FPrimalEval @@ {Y};

  exp = Abs[Total[Fv - FF, Infinity]];
  NCTest[exp, 0, test, k++];

  {{Fv}} = FvDualEval @@ X1;
  {FF} = FDualEval @@ X1;

  exp = Abs[Total[Fv - ToVector[FF], Infinity]];
  NCTest[exp, 0, test, k++];

  Fv = FvSylvesterEval @@ {X11, X11};
  FF = FSylvesterEval @@ {X11, X11};

  exp = Abs[Total[Fv - H1, Infinity]];
  NCTest[exp, 0, test, k++];

  exp = Abs[Total[FF - H2, Infinity]];
  NCTest[exp, 0, test, k++];

  (* Test #2 *)

  AA={
  {
  {IdentityMatrix[2],IdentityMatrix[2]}
  }
  ,
  {
  {Transpose[A],Transpose[B]}
  }
  };	
  CC={-Q,-Q};
  BB={IdentityMatrix[2]};

  Y={{1,3},{3,2}};
  syms = {True};
  dims=Map[Dimensions,{Y}];

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}, SymmetricVariables->{1}];

  answer = {{{{1, 0}, {0, 0}}, {{-2, 1/2}, {1/2, 1}}}, {{{0, 1}, {1, 0}}, {{-1, -5/2}, {-5/2, 0}}}, {{{0, 0}, {0, 1}}, {{0, -1}, {-1, -4}}}};
  exp = Abs[Total[AAv-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  answer = {{{1, 0, 1}}};
  exp = Abs[Total[BBv-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  y = SymmetricToVector[Y];
  answer = SDPPrimalEval[AAv, y];
  X1=SylvesterPrimalEval[AA,{Y}];

  exp = Abs[Total[X1-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}];

  answer = {{{{1, 0}, {0, 0}}, {{-2, 1/2}, {1/2, 1}}}, {{{0, 1/2}, {1/2, 0}}, {{0, -2}, {-2, -2}}}, {{{0, 1/2}, {1/2, 0}}, {{-1, -1/2}, {-1/2, 2}}}, {{{0, 0}, {0, 1}}, {{0, -1}, {-1, -4}}}};
  exp = Abs[Total[AAv-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  answer = {{{1, 0, 0, 1}}};
  exp = Abs[Total[BBv-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  y = ToVector[Y];
  answer = SDPPrimalEval[AAv, y];
  X1=SylvesterPrimalEval[AA,{Y}];

  exp = Abs[Total[X1-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  {XX1, XX2}=X1;

  answer = SDPDualEval[AAv, X1];
  Y1=SylvesterDualEval[AA,{XX1,XX2},syms];

  exp = Abs[Total[ToVector[Y1[[1]]]-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  X11 = MapThread[Dot, {X1,X1}];

  answer=SDPSylvesterEval[AAv,X11];
  H1=SylvesterSylvesterVecEval[AA,X11,dims,syms];
  scl = Norm[H1];

  exp = Abs[Total[H1-answer, Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  H2 = SylvesterSylvesterVecEval[AA, X11, dims, syms, True];

  exp = Abs[Total[Transpose[Q2] . H1 . Q2 - H2, Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  << SDP`;

  {FvDualEval, FvPrimalEval, 
   FvSylvesterEval, FvSylvesterDiagonalEval,	
    FvSylvesterSolve, FvSylvesterSolveFactored} = SDPFunctions[{AAv, BBv, CCv}];

  << SDPSylvester`;

  {FDualEval, FPrimalEval, 
   FSylvesterEval, FSylvesterDiagonalEval, 
    FSylvesterSolve, FSylvesterSolveFactored} = SDPFunctions[AA, BB, CC, syms];

  Fv = FvPrimalEval @@ {{y}};
  FF = FPrimalEval @@ {Y};

  exp = Abs[Total[Fv - FF, Infinity]];
  NCTest[exp, 0, test, k++];

  {{Fv}} = FvDualEval @@ X1;
  {FF} = FDualEval @@ X1;

  exp = Abs[Total[Fv - ToVector[FF], Infinity]];
  NCTest[exp, 0, test, k++];

  Fv = FvSylvesterEval @@ {X11, X11};
  FF = FSylvesterEval @@ {X11, X11};

  exp = Abs[Total[Fv - H1, Infinity]];
  NCTest[exp, 0, test, k++];

  exp = Abs[Total[FF - H2, Infinity]];
  NCTest[exp, 0, test, k++];

  (* Test #3 *)

  F={{3},{7}};
  K={{-1,2}};
  syms={True,False};

  AA={
  {
   {IdentityMatrix[2],IdentityMatrix[2]}
   ,
   {ConstantArray[0,{2,1}],ConstantArray[0,{2,2}]}
  }
  ,
  {
   {Transpose[A],Transpose[B]}
   ,
   {F,IdentityMatrix[2]}
  }
  ,
  {
   {ConstantArray[0,{3,2}], ConstantArray[0,{2,3}]}
   ,
   {{{0},{0},{1}},{{1,0,0},{0,1,0}}}
  }
  };
  CC={-Q,-Q,0*IdentityMatrix[3]};
  BB={IdentityMatrix[2],0*K};

  syms = {True,False};
  dims=Map[Dimensions,{Y,K}];

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}, SymmetricVariables->{1}];

  answer = {{{{1, 0}, {0, 0}}, {{-2, 1/2}, {1/2, 1}}, {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}}, {{{0, 1}, {1, 0}}, {{-1, -5/2}, {-5/2, 0}}, {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}}, {{{0, 0}, {0, 1}}, {{0, -1}, {-1, -4}}, {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}}, {{{0, 0}, {0, 0}}, {{3, 7/2}, {7/2, 0}}, {{0, 0, 1/2}, {0, 0, 0}, {1/2, 0, 0}}}, {{{0, 0}, {0, 0}}, {{0, 3/2}, {3/2, 7}}, {{0, 0, 0}, {0, 0, 1/2}, {0, 1/2, 0}}}};
  exp = Abs[Total[AAv-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  answer = {{{1, 0, 1, 0, 0}}};
  exp = Abs[Total[BBv-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  y = Join[SymmetricToVector[Y],ToVector[K]];
  answer = SDPPrimalEval[AAv, y];
  X1=SylvesterPrimalEval[AA,{Y,K}];

  exp = Abs[Total[X1-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}];

  answer = {{{{1, 0}, {0, 0}}, {{-2, 1/2}, {1/2, 1}}, {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}}, {{{0, 1/2}, {1/2, 0}}, {{0, -2}, {-2, -2}}, {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}}, {{{0, 1/2}, {1/2, 0}}, {{-1, -1/2}, {-1/2, 2}}, {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}}, {{{0, 0}, {0, 1}}, {{0, -1}, {-1, -4}}, {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}}, {{{0, 0}, {0, 0}}, {{3, 7/2}, {7/2, 0}}, {{0, 0, 1/2}, {0, 0, 0}, {1/2, 0, 0}}}, {{{0, 0}, {0, 0}}, {{0, 3/2}, {3/2, 7}}, {{0, 0, 0}, {0, 0, 1/2}, {0, 1/2, 0}}}};
  exp = Abs[Total[AAv-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  answer = {{{1, 0, 0, 1, 0, 0}}};
  exp = Abs[Total[BBv-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  y = Join[ToVector[Y],ToVector[K]];

  answer = SDPPrimalEval[AAv, y];
  X1=SylvesterPrimalEval[AA,{Y,K}];

  exp = Abs[Total[X1-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  {XX1, XX2, XX3}=X1;

  answer = SDPDualEval[AAv, X1];
  Y1=SylvesterDualEval[AA,{XX1,XX2,XX3},syms];

  exp = Abs[Total[Join[ToVector[Y1[[1]]], ToVector[Y1[[2]]]]-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  X11 = MapThread[Dot, {X1,X1}];

  answer=SDPSylvesterEval[AAv,X11];
  H1=SylvesterSylvesterVecEval[AA,X11,dims,syms];
  scl = Norm[H1];

  exp = Abs[Total[H1-answer, Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  H2 = SylvesterSylvesterVecEval[AA, X11, dims, syms, True];

  exp = Abs[Total[Transpose[Q2] . H1[[1;;4,1;;4]] . Q2 - H2[[1;;3,1;;3]], Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  exp = Abs[Total[Transpose[Q2] . H1[[1;;4,5;;6]] - H2[[1;;3,4;;5]], Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  exp = Abs[Total[H1[[5;;6,1;;4]] . Q2 - H2[[4;;5,1;;3]], Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  exp = Abs[Total[H1[[5;;6,5;;6]] - H2[[4;;5,4;;5]], Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  << SDP`;

  {FvDualEval, FvPrimalEval, 
   FvSylvesterEval, FvSylvesterDiagonalEval,	
    FvSylvesterSolve, FvSylvesterSolveFactored} = SDPFunctions[{AAv, BBv, CCv}];

  << SDPSylvester`;

  {FDualEval, FPrimalEval, 
   FSylvesterEval, FSylvesterDiagonalEval, 
    FSylvesterSolve, FSylvesterSolveFactored} = SDPFunctions[AA, BB, CC, syms];

  Fv = FvPrimalEval @@ {{y}};
  FF = FPrimalEval @@ {Y,K};

  exp = Abs[Total[Fv - FF, Infinity]];
  NCTest[exp, 0, test, k++];

  {{Fv}} = FvDualEval @@ X1;
  FF = FDualEval @@ X1;

  exp = Abs[Total[Fv - Flatten[Map[ToVector,FF]], Infinity]];
  NCTest[exp, 0, test, k++];

  Fv = FvSylvesterEval @@ {X11, X11};
  FF = FSylvesterEval @@ {X11, X11};

  exp = Abs[Total[Fv - H1, Infinity]];
  NCTest[exp, 0, test, k++];

  exp = Abs[Total[FF - H2, Infinity]];
  NCTest[exp, 0, test, k++];

  (* Riccati *)

  SeedRandom[1234];
  n=2;
  m=2;

  Id = IdentityMatrix[n];
  A = RandomReal[{-10,10},{n,n}];
  B = RandomReal[{-10,10},{n,m}];
  Ze = ConstantArray[0,{n,n}];

  Idm = IdentityMatrix[m];
  Zemm = ConstantArray[0,{m,m}];
  Zenm = ConstantArray[0,{n,m}];
  IdX = ArrayFlatten[{{Transpose[Zenm]},{Id}}];
  IdW = ArrayFlatten[{{Idm},{Zenm}}];
  Zenpm = ConstantArray[0,{n+m,n+m}];

  syms={True,False,True};

  AA={
  {{2 A,Id},{2B,Id},{Zenm,Transpose[Zenm]}},(* A X + B L < 0*)
  {{-2 IdX,Transpose[IdX]},{-2 IdW,Transpose[IdX]},{-2 IdW,Transpose[IdW]}} (* -[W, L; L^T X] < 0 *)
  };
  CC={-Id,Zenpm};
  BB={Ze,Transpose[Zenm],-Idm};

  X=RandomReal[{-10,10},{n,n}];
  X = X + Transpose[X];
  L=RandomReal[{-10,10},{m,n}];
  W=RandomReal[{-10,10},{m,m}];
  W = W + Transpose[W];

  dims=Map[Dimensions,{X,L,W}];

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}, SymmetricVariables->{1,3}];

  answer = {{{{15.064339702967715, -8.27553146091735}, {-8.27553146091735, 0.}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, -2, 0}, {0, 0, 0, 0}}}, {{{0.8785700080750871, 5.090428937581574}, {5.090428937581574, -16.5510629218347}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, -2}, {0, 0, -2, 0}}}, {{{0., 0.43928500403754356}, {0.43928500403754356, -4.883481827804566}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, -2}}}, {{{-19.534217081230132, 0.8751353390213623}, {0.8751353390213623, 0.}}, {{0, 0, -1, 0}, {0, 0, 0, 0}, {-1, 0, 0, 0}, {0, 0, 0, 0}}}, {{{17.09064653368648, -0.41336659055150804}, {-0.41336659055150804, 0.}}, {{0, 0, 0, 0}, {0, 0, -1, 0}, {0, -1, 0, 0}, {0, 0, 0, 0}}}, {{{0., -9.767108540615066}, {-9.767108540615066, 1.7502706780427246}}, {{0, 0, 0, -1}, {0, 0, 0, 0}, {0, 0, 0, 0}, {-1, 0, 0, 0}}}, {{{0., 8.54532326684324}, {8.54532326684324, -0.8267331811030161}}, {{0, 0, 0, 0}, {0, 0, 0, -1}, {0, 0, 0, 0}, {0, -1, 0, 0}}}, {{{0, 0}, {0, 0}}, {{-2, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}, {{{0, 0}, {0, 0}}, {{0, -2, 0, 0}, {-2, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}, {{{0, 0}, {0, 0}}, {{0, 0, 0, 0}, {0, -2, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}};
  exp = Abs[Total[AAv-answer, Infinity]];
  NCTest[exp < 10^(-9), True, test, k++];

  answer = {{{0, 0, 0, 0, 0, 0, 0, -1, 0, -1}}};
  exp = Abs[Total[BBv-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  y = Join[SymmetricToVector[X],ToVector[L],SymmetricToVector[W]];
  answer = SDPPrimalEval[AAv, y];
  X1=SylvesterPrimalEval[AA,{X,L,W}];
  scl = Max[Map[Norm, X1]];

  exp = Abs[Total[X1-answer, Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}];

  answer = {{{{15.064339702967715, -8.27553146091735}, {-8.27553146091735, 0.}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, -2, 0}, {0, 0, 0, 0}}}, {{{0.8785700080750871, -2.441740913902283}, {-2.441740913902283, 0.}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, -1}, {0, 0, -1, 0}}}, {{{0., 7.532169851483857}, {7.532169851483857, -16.5510629218347}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, -1}, {0, 0, -1, 0}}}, {{{0., 0.43928500403754356}, {0.43928500403754356, -4.883481827804566}}, {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, -2}}}, {{{-19.534217081230132, 0.8751353390213623}, {0.8751353390213623, 0.}}, {{0, 0, -1, 0}, {0, 0, 0, 0}, {-1, 0, 0, 0}, {0, 0, 0, 0}}}, {{{17.09064653368648, -0.41336659055150804}, {-0.41336659055150804, 0.}}, {{0, 0, 0, 0}, {0, 0, -1, 0}, {0, -1, 0, 0}, {0, 0, 0, 0}}}, {{{0., -9.767108540615066}, {-9.767108540615066, 1.7502706780427246}}, {{0, 0, 0, -1}, {0, 0, 0, 0}, {0, 0, 0, 0}, {-1, 0, 0, 0}}}, {{{0., 8.54532326684324}, {8.54532326684324, -0.8267331811030161}}, {{0, 0, 0, 0}, {0, 0, 0, -1}, {0, 0, 0, 0}, {0, -1, 0, 0}}}, {{{0, 0}, {0, 0}}, {{-2, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}, {{{0, 0}, {0, 0}}, {{0, -1, 0, 0}, {-1, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}, {{{0, 0}, {0, 0}}, {{0, -1, 0, 0}, {-1, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}, {{{0, 0}, {0, 0}}, {{0, 0, 0, 0}, {0, -2, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}}};
  exp = Abs[Total[AAv-answer, Infinity]];
  NCTest[exp < 10^(-9), True, test, k++];

  answer = {{{0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1}}};
  exp = Abs[Total[BBv-answer, Infinity]];
  NCTest[exp, 0, test, k++];

  (* 2 {A.X + B.L, -ArrayFlatten[{{W, L},{0*Transpose[L], X}}]}; *)
  y = Join[ToVector[X], ToVector[L], ToVector[W]];
  answer = SDPPrimalEval[AAv, y];
  X1=SylvesterPrimalEval[AA,{X,L,W}];
  scl = Max[Map[Norm, X1]];

  exp = Abs[Total[X1-answer, Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  {XX1, XX2}=X1;

  (* 2 {Transpose[A].XX1-XX2[[3;;5,3;;5]], Transpose[B].XX1-XX2[[1;;2,3;;5]], -XX2[[1;;2,1;;2]]}; *)
  answer = SDPDualEval[AAv, X1];
  Y1=SylvesterDualEval[AA,{XX1,XX2},syms];
  scl = Max[Map[Norm, Y1]];

  exp = Abs[Total[Join[ToVector[Y1[[1]]], ToVector[Y1[[2]]], ToVector[Y1[[3]]]]-answer, Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  X11 = MapThread[Dot, {X1,X1}];

  answer=SDPSylvesterEval[AAv,X11];

  H1=SylvesterSylvesterVecEval[AA,X11,dims,syms];
  scl = Norm[H1];

  exp = Abs[Total[H1-answer, Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  H2 = SylvesterSylvesterVecEval[AA, X11, dims, syms, True];

  exp = Transpose[Q2] . H1[[1;;4,1;;4]] . Q2 - H2[[1;;3,1;;3]];
  exp = Abs[Total[exp, Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  exp = Transpose[Q2] . H1[[1;;4,5;;6]] - H2[[1;;3,4;;5]];
  exp = Abs[Total[exp, Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  exp = H1[[5;;6,1;;4]] . Q2 - H2[[4;;5,1;;3]];
  exp = Abs[Total[exp, Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  exp = H1[[5;;6,5;;6]] - H2[[4;;5,4;;5]];
  exp = Abs[Total[exp, Infinity]];
  NCTest[exp < scl*10^(-9), True, test, k++];

  << SDP`;

  {FvDualEval, FvPrimalEval, 
   FvSylvesterEval, FvSylvesterDiagonalEval,	
    FvSylvesterSolve, FvSylvesterSolveFactored} = SDPFunctions[{AAv, BBv, CCv}];

  << SDPSylvester`;

  {FDualEval, FPrimalEval, 
   FSylvesterEval, FSylvesterDiagonalEval, 
    FSylvesterSolve, FSylvesterSolveFactored} = SDPFunctions[AA, BB, CC, syms];

  Fv = FvPrimalEval @@ {{y}};
  FF = FPrimalEval @@ {X,L,W};

  exp = Abs[Total[Fv - FF, Infinity]];
  NCTest[exp < 10^(-9), True, test, k++];

  {{Fv}} = FvDualEval @@ X1;
  FF = FDualEval @@ X1;

  exp = Abs[Total[Fv - Flatten[Map[ToVector,FF]], Infinity]];
  NCTest[exp < 10^(-9), True, test, k++];

  Fv = FvSylvesterEval @@ {X11, X11};
  FF = FSylvesterEval @@ {X11, X11};

  exp = Abs[Total[Fv - answer, Infinity]];
  NCTest[exp < 10^(-9), True, test, k++];

  exp = Abs[Total[FF - H2, Infinity]];
  NCTest[exp < 10^(-9), True, test, k++];
  

];
