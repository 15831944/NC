<< NCPoly`

Block[
  {vars,poly,mat,p,d,
   p1,p2,
   answer},

  vars = {{x, y}};
  poly = NCPoly[{1, -1}, {{x, y}, {y, x}}, vars];
  p1 = poly;
  
  {mat,d} = NCPolyCoefficientArray[poly];
  answer = SparseArray[{0,0,0,0,1,-1,0}];
  NCTest[mat, answer];

  p = NCPolyFromCoefficientArray[mat, d];
  NCTest[p, poly];

  poly = NCPoly[{2, 1, -1, 1}, {{x}, {x, y}, {y, x}, {x,x,y}}, vars];
  
  {mat,d} = NCPolyCoefficientArray[poly];
  answer = SparseArray[{0,2,0,0,1,-1,0,0,1,0,0,0,0,0,0}];
  NCTest[mat, answer];

  p = NCPolyFromCoefficientArray[mat, d];
  NCTest[p, poly];

  poly = NCPoly[{2, 1, -1, 1}, {{x}, {x, y}, {y, x}, {x,x,x}}, vars];
  p2 = poly;
  
  {mat,d} = NCPolyCoefficientArray[poly];
  answer = SparseArray[{0,2,0,0,1,-1,0,1,0,0,0,0,0,0,0}];
  NCTest[mat, answer];

  p = NCPolyFromCoefficientArray[mat, d];
  NCTest[p, poly];

  poly = {p1, p2};
  {mat,d} = NCPolyCoefficientArray[poly];
  answer = SparseArray[{{0,0,0,0,1,-1,0,0,0,0,0,0,0,0,0}, {0,2,0,0,1,-1,0,1,0,0,0,0,0,0,0}}];
  NCTest[mat, answer];

  p = NCPolyFromCoefficientArray[mat, d];
  NCTest[p, {p1,p2}];

];
