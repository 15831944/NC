Block[
  {x,y,z,
   coeff1,mon1,p1,
   coeff2,mon2,p2,
   m0,m1,m2,m3,m4,m5,
   mSorted,zM,mUnsorted,
   isGraded
   },
  
  (* Test constructors *)

  (* Standard Constructor *)
  Clear[x, y, z];
  vars = {x, y, z};

  coeff1 = {1, 2, 3, -1, -2, -3, 1/2};
  mon1 = {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}};
  p1 = NCPoly[coeff1, mon1, vars];

  NCTest[NCPolyGetCoefficients[p1], {1, 2, 3, -1, -3, -2, 1/2}];
  NCTest[NCPolyDegree[p1], 4];
  NCTest[NCPolyGetIntegers[p1], \
       {{0, 0}, {1, 0}, {1, 2}, {2, 1}, {2, 6}, {4, 9}, {4, 80}}];
  NCTest[NCPolyGetDigits[p1], \
       {{}, {0}, {2}, {0, 1}, {2, 0}, {0, 1, 0, 0}, {2, 2, 2, 2}}];

  coeff2 = {1, 0, 2, 3, -1, -2, -3, 0, 1/2};
  mon2 = {{}, {x,x}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {y,z}, {z, z, z, z}};
  p2 = NCPoly[coeff2, mon2, vars];

  NCTest[NCPolyGetCoefficients[p2], {1, 2, 3, -1, -3, -2, 1/2}];
  NCTest[NCPolyDegree[p2], 4];
  NCTest[NCPolyGetIntegers[p2], \
       {{0, 0}, {1, 0}, {1, 2}, {2, 1}, {2, 6}, {4, 9}, {4, 80}}];
  NCTest[NCPolyGetDigits[p2], \
       {{}, {0}, {2}, {0, 1}, {2, 0}, {0, 1, 0, 0}, {2, 2, 2, 2}}];

  (* Monomial Constructos *)

  m0 = NCPolyConstant[3, 3];
  NCTest[NCPolyGetCoefficients[m0], {3}];
  NCTest[NCPolyGetDigits[m0], {{}}];

  m1 = NCPolyMonomial[{}, 3];
  NCTest[m1, 1];

  m2 = NCPolyMonomial[{0, 1, 2, 1}, 3];
  NCTest[NCPolyLeadingTerm[m2], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m2], {1}];

  m3 = NCPolyMonomial[{4, 16} -> 1, 3];
  NCTest[NCPolyLeadingTerm[m3], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m3], {1}];

  m4 = NCPolyMonomial[{0,0} -> -1, 3];
  NCTest[NCPolyLeadingTerm[m4], {0, 0} -> -1];
  NCTest[NCPolyGetCoefficients[m4], {-1}];

  (* Some utilities *)

  NCTest[NCPolyLeadingTerm[p1], {4, 80} -> 1/2];
  NCTest[NCPolyLeadingTerm[p1, 1], {4, 80} -> 1/2];
  NCTest[NCPolyLeadingTerm[p1, 2], {4, 9} -> -2];
  NCTest[NCPolyLeadingTerm[p1, 4], {2, 1} -> -1];
  NCTest[NCPolyLeadingTerm[p1, 8], $Failed];

  NCTest[NCPolyMonomialQ[p1], False];
  NCTest[NCPolyMonomialQ[p2], False];
  NCTest[NCPolyMonomialQ[m2], True];
  NCTest[NCPolyMonomialQ[m3], True];
  NCTest[NCPolyMonomialQ[m4], True];

  m5 = NCPolyMonomial[{x,y},vars];
  NCTest[NCPolyCoefficient[p1, m5], -1];
  m5 = NCPolyMonomial[{x,y,x,x},vars];
  NCTest[NCPolyCoefficient[p1, m5], -2];
  m5 = NCPolyMonomial[{z,z},vars];
  NCTest[NCPolyCoefficient[p1, m5], 0];

  (* Sorting *)

  mSorted = { 
    NCPolyMonomial[{0}, 3], 
    NCPolyMonomial[{2}, 3],
    NCPolyMonomial[{0,2}, 3], 
    NCPolyMonomial[{2,1}, 3],
    NCPolyMonomial[{2,1,2}, 3],
    NCPolyMonomial[{2,2,1}, 3]
  };
  zM = Table[0, {Length[mSorted]}];
  mUnsorted = mSorted[[RandomSample[Range[1, Length[mSorted]]]]];
  NCTest[mSorted-Sort[mUnsorted], zM];

  mUnsorted = mSorted \
	    + mSorted[[RandomSample[Range[1, Length[mSorted]]]]];
  mUnsortedLeading = Map[NCPolyLeadingMonomial, mUnsorted];
  NCTest[Sort[mUnsortedLeading] - Map[NCPolyLeadingMonomial, Sort[mUnsorted]], zM];

  NCTest[mSorted[[1]] > mSorted[[2]], False];
  NCTest[mSorted[[2]] > mSorted[[1]], True];

  (* Fancy Display *)

  Print["* Check the following expressions for proper formating.\n> BEGIN"];
  
  Print[NCPolyDisplay[p1, vars]];
  Print[NCPolyDisplay[p2, vars]];
  Print[NCPolyDisplay[m2, vars]];
  Print[NCPolyDisplay[m3, vars]];
  Print[NCPolyDisplay[m4, vars]];

  (* Fancy Display w/ default symbols *)

  Print[NCPolyDisplay[p1]];
  Print[NCPolyDisplay[p2]];

  Print["< END"];

  (* Test graded constructors *)
  
  isGraded = (NCPolyOrderType[NCPolyMonomial[{1}, 1]] === NCPoly`NCPolyDegLexGraded);

  If[ !isGraded,
      Print["> Class does not support graded ordering. Skipping tests..."];
      Return[]
  ];

  (* Graded Constructor *)

  Clear[x, y, z];
  vars = {{x, y}, {z}};
  coeff1 = {1, 2, 3, -1, -2, -3, 1/2};
  mon1 = {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}};
  p1 = NCPoly[coeff1, mon1, vars];

  NCTest[NCPolyGetCoefficients[p1], {1, 2, -1, -2, 3, -3, 1/2}];
  NCTest[NCPolyDegree[p1], 4];
  NCTest[NCPolyGetDigits[p1], \
       {{}, {0}, {0, 1}, {0, 1, 0, 0}, {2}, {2, 0}, {2, 2, 2, 2}}];

  coeff2 = {1,     0,   2,   3,    -1,        -2,   -3,     0,          1/2};
  mon2 = { {}, {x,x}, {x}, {z}, {x,y}, {x,y,x,x}, {z,x}, {y,z}, {z, z, z, z}};
  p2 = NCPoly[coeff2, mon2, vars];

  NCTest[NCPolyGetCoefficients[p2], {1, 2, -1, -2, 3, -3, 1/2}];
  NCTest[NCPolyDegree[p2], 4];
  NCTest[NCPolyGetDigits[p2], \
       {{}, {0}, {0, 1}, {0, 1, 0, 0}, {2}, {2, 0}, {2, 2, 2, 2}}];

  (* Standard Constructor *)

  coeff3 = {1, 2, 3, -1, -2, -3, 1/2};
  mon3 = {{}, {x}, {z}, {x, y}, {x, y, x, x}, {z, x}, {z, z, z, z}};
  p3 = NCPoly[coeff3, mon3, Flatten[vars]];

  (* Monomial Constructos *)

  m0 = NCPolyConstant[3, {2,1}];
  NCTest[NCPolyGetCoefficients[m0], {3}];
  NCTest[NCPolyGetDigits[m0], {{}}];

  m1 = NCPolyMonomial[{}, 3];
  NCTest[m1, 1];

  m1 = NCPolyMonomial[{}, {3}];
  NCTest[m1, 1];

  m1 = NCPolyMonomial[{}, {2,1}];
  NCTest[m1, 1];

  m2 = NCPolyMonomial[{0, 1, 2, 1}, {2, 1}];
  NCTest[NCPolyLeadingTerm[m2], {4, 16} -> 1];
  NCTest[NCPolyGetDigits[m2], {{0,1,2,1}}];
  NCTest[NCPolyGetCoefficients[m2], {1}];

  m2 = NCPolyMonomial[{a, b, c, b}, {{a, b}, {c}}];
  NCTest[NCPolyLeadingTerm[m2], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m2], {1}];
  NCTest[NCPolyGetDigits[m2], {{0,1,2,1}}];

  m3 = NCPolyMonomial[{4, 16} -> 1, 3];
  NCTest[NCPolyLeadingTerm[m3], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m3], {1}];
  NCTest[NCPolyGetDigits[m3], {{0,1,2,1}}];

  m4 = NCPolyMonomial[{4, 16} -> 1, 3];
  NCTest[NCPolyLeadingTerm[m4], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m4], {1}];
  NCTest[NCPolyGetDigits[m4], {{0,1,2,1}}];

  m3 = NCPolyMonomial[{4, 16} -> 1, {3}];
  NCTest[NCPolyLeadingTerm[m3], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m3], {1}];
  NCTest[NCPolyGetDigits[m3], {{0,1,2,1}}];

  m4 = NCPolyMonomial[{4, 16} -> 1, {3}];
  NCTest[NCPolyLeadingTerm[m4], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m4], {1}];
  NCTest[NCPolyGetDigits[m4], {{0,1,2,1}}];

  m3 = NCPolyMonomial[{1, 3, 16} -> 1, {2,1}];
  NCTest[NCPolyLeadingTerm[m3], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m3], {1}];
  NCTest[NCPolyGetDigits[m3], {{0,1,2,1}}];

  m4 = NCPolyMonomial[{4, 16} -> 1, {2,1}];
  NCTest[NCPolyLeadingTerm[m4], {4, 16} -> 1];
  NCTest[NCPolyGetCoefficients[m4], {1}];
  NCTest[NCPolyGetDigits[m4], {{0,1,2,1}}];

  m5 = NCPolyMonomial[{0, 0} -> -1, 3];
  NCTest[NCPolyLeadingTerm[m5], {0, 0} -> -1];
  NCTest[NCPolyGetCoefficients[m5], {-1}];
  NCTest[NCPolyGetDigits[m5], {{}}];

  m5 = NCPolyMonomial[{0, 0} -> -1, {3}];
  NCTest[NCPolyLeadingTerm[m5], {0, 0} -> -1];
  NCTest[NCPolyGetCoefficients[m5], {-1}];
  NCTest[NCPolyGetDigits[m5], {{}}];

  m5 = NCPolyMonomial[{0, 0} -> -1, {2,1}];
  NCTest[NCPolyLeadingTerm[m5], {0, 0} -> -1];
  NCTest[NCPolyGetCoefficients[m5], {-1}];
  NCTest[NCPolyGetDigits[m5], {{}}];

  (* Some utilities *)

  NCTest[NCPolyLeadingTerm[p1], {4, 80} -> 1/2];
  NCTest[NCPolyLeadingTerm[p1, 1], {4, 80} -> 1/2];
  NCTest[NCPolyLeadingTerm[p1, 2], {2, 6} -> -3];
  NCTest[NCPolyLeadingTerm[p1, 4], {4, 9} -> -2];
  NCTest[NCPolyLeadingTerm[p1, 8], $Failed];

  NCTest[NCPolyMonomialQ[p1], False];
  NCTest[NCPolyMonomialQ[p2], False];
  NCTest[NCPolyMonomialQ[m2], True];
  NCTest[NCPolyMonomialQ[m3], True];
  NCTest[NCPolyMonomialQ[m4], True];
  NCTest[NCPolyMonomialQ[m5], True];

  (* Sorting *)

  mSorted = { 
    NCPolyMonomial[{0}, 3], 
    NCPolyMonomial[{2}, 3],
    NCPolyMonomial[{0,2}, 3], 
    NCPolyMonomial[{2,1}, 3],
    NCPolyMonomial[{2,1,2}, 3],
    NCPolyMonomial[{2,2,1}, 3]
  };
  mUnsorted = mSorted[[RandomSample[Range[1, Length[mSorted]]]]];
  NCTest[mSorted === Sort[mUnsorted], True];

  (* mUnsorted = mSorted \
	    + mSorted[[RandomSample[Range[1, Length[mSorted]]]]];
  mUnsortedLeading = Map[NCPolyLeadingMonomial, mUnsorted];
  NCTest[Sort[mUnsortedLeading] - Map[NCPolyLeadingMonomial, Sort[mUnsorted]], zM];
  *)

  NCTest[mSorted[[1]] > mSorted[[2]], False];
  NCTest[mSorted[[2]] > mSorted[[1]], True];

  (* Fancy Display *)

  Print["* Check the following expressions for proper formating.\n> BEGIN"];

  Print[NCPolyDisplay[p1, vars]];
  Print[NCPolyDisplay[p2, vars]];
  Print[NCPolyDisplay[m2, vars]];
  Print[NCPolyDisplay[m3, vars]];
  Print[NCPolyDisplay[m4, vars]];
  Print[NCPolyDisplay[m5, vars]];

  (* Fancy Display w/ default symbols *)

  Print[NCPolyDisplay[p1]];
  Print[NCPolyDisplay[p2]];

  Print["< END"];

];