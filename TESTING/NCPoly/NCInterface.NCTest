<< NCAlgebra`
<< NCGBX`

Block[
  {a,b,c,d,
  vars,NCExp,PolyExp
  },
  
  (* Test NCAlgebra interface *)

  (* TESTING NCToNCPoly/NCPolyToNC -- BEGIN *)

  Clear[a,b,c,d];
  SNC[a,b,c,d];

  (* NCToNCPoly *)
  
  vars = {{a},{b,c}};
  NCExp = a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPolyMonomial[{0}, {1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = 2 b;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, 2 NCPolyMonomial[{1}, {1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = - c;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, -NCPolyMonomial[{2},{1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = b ** a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPolyMonomial[{1,0}, {1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = 5 c ** b ** a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, 5 NCPolyMonomial[{2,1,0},{1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = - b ** c ** b ** a;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, - NCPolyMonomial[{1,2,1,0}, {1,2}]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = a**a + b**b + c**c;
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPoly[{1,1,1}, {{a,a},{b,b},{c,c}}, vars]];
  NCTest[NCExp, NCExpExp];

  vars = {{a},{b,c}};
  NCExp = a**a -(- b**b - c**c);
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPoly[{1,1,1}, {{a,a},{b,b},{c,c}}, vars]];
  NCTest[(NCExp /. (x_ -> y_) -> x - y), NCExpExp];

  vars = {{a},{b,c}};
  NCExp = a**a - (- b**b - c**c);
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, NCPoly[{1,1,1}, {{a,a},{b,b},{c,c}}, vars]];
  NCTest[(NCExp /. (x_ == y_) -> x - y), NCExpExp];

  vars = {{a},{b,c}};
  NCExp = a**a + b**b + c**c + d**d;
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCMonomialToDigits::InvalidSymbol];

  vars = {{a},{b,{c}}};
  NCExp = a**a + b**b + c**c;
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCPoly::InvalidList];

  vars = {{a},{b,c}};
  NCExp = a**a + b**b + c**c +inv[a];
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCPoly::NotPolynomial];

  NCExp = inv[a**a + b**b + c**c];
  NCTestCheck[NCToNCPoly[NCExp, vars],
     	      $Failed,
	      NCPoly::NotPolynomial];

  (* List functionality *)

  NCExp = { - b ** c ** b ** a, a**a + b**b + c**c };
  PolyExp = NCToNCPoly[NCExp, vars];
  NCExpExp = NCPolyToNC[PolyExp, vars];

  NCTest[PolyExp, {NCPoly[{-1}, {{b,c,b,a}}, vars], NCPoly[{1,1,1}, {{a,a},{b,b},{c,c}}, vars]}];
  NCTest[NCExp, NCExpExp];

  (* TESTING NCToNCPoly/NCPolyToNC -- END *)

  (* TESTING SetKnowns/SetUnknowns -- BEGIN *)

  Clear[a,b,c,d];
  SNC[a,b,c,d];

  SetKnowns[a,b];
  SetUnknowns[c,d];
  NCTest[GetMonomialOrder[], {{a,b},{c},{d}}];

  SetKnowns[a,b];
  SetUnknowns[{c,d}];
  NCTest[GetMonomialOrder[], {{a,b},{c,d}}];

  SetKnowns[a,b];
  SetUnknowns[{c},{d}];
  NCTest[GetMonomialOrder[], {{a,b},{c},{d}}];

  SetKnowns[{a},{b}];
  SetUnknowns[{c},{d}];
  NCTest[GetMonomialOrder[], {{a,b},{c},{d}}];

  SetKnowns[b,c];
  NCTest[GetMonomialOrder[], {{b,c}}];

  SetKnowns[{a,b}];
  NCTest[GetMonomialOrder[], {{a,b}}];

  SetKnowns[{{a},{{b}}}];
  NCTest[GetMonomialOrder[], {{a,b}}];

  SetUnknowns[{c,d}];
  NCTest[GetMonomialOrder[], {{a,b},{c,d}}];

  SetUnknowns[d,c];
  NCTest[GetMonomialOrder[], {{a,b},{d},{c}}];

  SetUnknowns[d,{c}];
  NCTest[GetMonomialOrder[], {{a,b},{d},{c}}];

  SetUnknowns[d,{c,b}];
  NCTest[GetMonomialOrder[], {{a,b},{d},{c,b}}];

  ClearMonomialOrder[];
  SetUnknowns[{a,b}];
  NCTest[GetMonomialOrder[], {{a,b}}];

  SetUnknowns[{c,d}];
  NCTest[GetMonomialOrder[], {{c,d}}];

  SetKnowns[a,b];
  SetUnknowns[c,d];
  SetKnowns[c,d];
  SetUnknowns[a,b];
  NCTest[GetMonomialOrder[], {{c,d},{a},{b}}];

  (* TESTING SetKnowns/SetUnknowns -- END *);

  (* TESTING SetMonomialOrder -- BEGIN *)

  SetMonomialOrder[a,b];
  NCTest[GetMonomialOrder[], {{a},{b}}];

  SetMonomialOrder[{a},{b}];
  NCTest[GetMonomialOrder[], {{a},{b}}];

  SetMonomialOrder[{a,b}];
  NCTest[GetMonomialOrder[], {{a,b}}];

  SetMonomialOrder[{a,b},{c,d}];
  NCTest[GetMonomialOrder[], {{a,b},{c,d}}];

  SetMonomialOrder[{a,b},{c}];
  NCTest[GetMonomialOrder[], {{a,b},{c}}];

  SetMonomialOrder[{a,b},c];
  NCTest[GetMonomialOrder[], {{a,b},{c}}];

  NCTestCheck[SetMonomialOrder[{a,{b}},c],
	      $Failed,
	      SetMonomialOrder::InvalidOrder];

  NCTestCheck[SetMonomialOrder[{a,b},{{c}}],
	      $Failed,
	      SetMonomialOrder::InvalidOrder];

  (* Monomial Order with inv's *)
  
  SetMonomialOrder[{a,b},inv[c]];
  NCTest[GetMonomialOrder[], {{a,b},{inv[c]}}];

  SetMonomialOrder[{a,b},{inv[c]}];
  NCTest[GetMonomialOrder[], {{a,b},{inv[c]}}];

  SetMonomialOrder[{a,b},inv[1+c]];
  NCTest[GetMonomialOrder[], {{a,b},{inv[1+c]}}];

  SetMonomialOrder[{a,b},inv[1+inv[1+c]]];
  NCTest[GetMonomialOrder[], {{a,b},{inv[1+inv[1+c]]}}];

  (* Monomial Order with tps's and ajs *)
  
  SetMonomialOrder[{a,b},tp[c]];
  NCTest[GetMonomialOrder[], {{a,b},{tp[c]}}];

  SetMonomialOrder[{a,b},{tp[c]}];
  NCTest[GetMonomialOrder[], {{a,b},{tp[c]}}];

  SetMonomialOrder[{a,tp[a],b},{tp[c]}];
  NCTest[GetMonomialOrder[], {{a,tp[a],b},{tp[c]}}];

  NCTestCheck[SetMonomialOrder[{a,b},tp[1+c]],
	      $Failed,
	      SetMonomialOrder::InvalidOrder];

  SetMonomialOrder[{a,b},aj[c]];
  NCTest[GetMonomialOrder[], {{a,b},{aj[c]}}];

  SetMonomialOrder[{a,b},{aj[c]}];
  NCTest[GetMonomialOrder[], {{a,b},{aj[c]}}];

  SetMonomialOrder[{a,aj[a],b},{aj[c]}];
  NCTest[GetMonomialOrder[], {{a,aj[a],b},{aj[c]}}];

  NCTestCheck[SetMonomialOrder[{a,b},aj[1+c]],
	      $Failed,
	      SetMonomialOrder::InvalidOrder];

  NCTestCheck[SetMonomialOrder[{a,b},Exp[c]],
	      $Failed,
	      SetMonomialOrder::InvalidOrder];

  (* TESTING SetMonomialOrder -- END *)

  SetMonomialOrder[{a,b},{d},{c,b}];
  NCTest[NCPolyDisplayOrder[GetMonomialOrder[]], 
       "a < b \[LessLess]  d \[LessLess]  c < b"];
  NCTest[PrintMonomialOrder[], 
       "a < b \[LessLess]  d \[LessLess]  c < b"];

  SetMonomialOrder[{a,b},{d},{c,b,e}];
  NCTest[NCPolyDisplayOrder[GetMonomialOrder[]], 
       "a < b \[LessLess]  d \[LessLess]  c < b < e"];
  NCTest[PrintMonomialOrder[], 
       "a < b \[LessLess]  d \[LessLess]  c < b < e"];

  (* TESTING NCMakeGB -- BEGIN *)

  SetMonomialOrder[a,b];
  NCTestCheck[NCMakeGB[{a,b,c}],
	      $Failed,
              NCMakeGB::MissingSymbol];

  NCTestCheck[NCMakeGB[{a,b,inv[a]}, VerboseLevel -> 0],
	      {1 -> 0},
              NCMakeGB::AdditionalRelations];

  NCTestCheck[NCMakeGB[{a,b,kinv[a]}],
	      $Failed,
              NCMakeGB::UnknownFunction];

  (* TESTING NCMakeGB -- END *)

];