(*************************************************************************
 *         This file was automatically generated by md2usage.py          *
 *                   on 2016-07-12 17:17:40.098158                       *
 *************************************************************************)


(* CommuteEverything *)
CommuteEverything::usage = "\
CommuteEverything answers the question \"what does it sound like?\".

CommuteEverything[expr] replaces all noncommutative symbols in expr by its commutative self using Commutative so that the resulting expression contains only commutative products or inverses.

See also: Commutative.";

(* NonCommutativeQ *)
NonCommutativeQ::usage = "\
NonCommutativeQ[expr] is equal to Not[CommutativeQ[expr]].

See also: CommutativeQ.";

(* Commutative *)
Commutative::usage = "\
Commutative[symbol] is commutative even if symbol is noncommutative.

See also: CommuteEverything, CommutativeQ, SetCommutative, SetNonCommutative.";

(* CommutativeQ *)
CommutativeQ::usage = "\
CommutativeQ[expr] is _True_ if expression expr is commutative (the default), and _False_ if expr is noncommutative.

See also: SetCommutative, SetNonCommutative.";

(* SetNonCommutative *)
SetNonCommutative::usage = "\
SetNonCommutative[a,b,c,...] sets all the _Symbols_ a, b, c, ... to be noncommutative.

See also: SetCommutative, CommutativeQ, NonCommutativeQ.";

(* SetCommutative *)
SetCommutative::usage = "\
SetCommutative[a,b,c,...] sets all the _Symbols_ a, b, c, ... to be commutative.

See also: SetNonCommutative, CommutativeQ, NonCommutativeQ.";

(* inv *)
inv::usage = "\
inv[expr] is the 2-sided inverse of expression expr.";

(* Id *)
Id::usage = "\
Id is noncommutative multiplicative identity. Actually Id is now set equal 1.";

(* tp *)
tp::usage = "\
tp[expr] is the tranpose of expression expr. It is a linear involution.

See also: aj, co.";

(* co *)
co::usage = "\
co[expr] is the conjugate of expression expr. It is a linear involution.

See also: aj.";

(* rt *)
rt::usage = "\
rt[expr] is the root of expression expr.";

(* aj *)
aj::usage = "\
aj[expr] is the adjoint of expression expr. It is a conjugate linear involution.

See also: tp, co.";
