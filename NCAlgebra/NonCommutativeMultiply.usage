(*************************************************************************
 *         This file was automatically generated by md2usage.py          *
 *                   on 2016-03-20 10:01:14.784832                       *
 *************************************************************************)


(* co *)
co::usage = "\
co[x] is the conjugate of x. It is a linear involution.

See also: aj."

(* Commutative *)
Commutative::usage = "\
Commutative[x] makes the noncommutative _Symbol_ x behave as if it were commutative.

See also: CommuteEverything, CommutativeQ, SetCommutative, SetNonCommutative."

(* aj *)
aj::usage = "\
aj[x] is the adjoint of x. aj is a conjugate linear involution.

See also: tp, co."

(* tp *)
tp::usage = "\
tp[x] is the tranpose of x. It is a linear involution.

See also: aj, co."

(* rt *)
rt::usage = "\
rt[x] is the root of x."

(* CommuteEverything *)
CommuteEverything::usage = "\
CommuteEverything answers the question \"what does it sound like?\".

CommuteEverything[expr] replaces all noncommutative symbols in expr by its commutative self using Commutative so that the resulting expression contains only commutative products or inverses.

See also: Commutative."

(* NCSymmetricQ *)
NCSymmetricQ::usage = "\
NCSymmetricQ[expr] returns _True_ if expr is symmetric, i.e. if tp[exp] == exp.

NCSymmetricQ attempts to detect symmetric variables using NCSymmetricTest.

See also: NCSelfAdjointQ, NCSymmetricTest."

(* inv *)
inv::usage = "\
inv[x] is the 2-sided inverse of x."

(* Id *)
Id::usage = "\
Id is noncommutative multiplicative identity. Actually Id is now set equal 1."

(* ExpandNonCommutativeMultiply *)
ExpandNonCommutativeMultiply::usage = "\
ExpandNonCommutativeMultiply[expr] expands out **s in expr.

For example

    ExpandNonCommutativeMultiply[a**(b+c)]

returns

    a**b+a**c.

Its aliases are NCE, and NCExpand."

(* SetNonCommutative *)
SetNonCommutative::usage = "\
SetNonCommutative[a,b,c,...] sets all the _Symbols_ a, b, c, ... to be noncommutative.

See also: SetCommutative, CommutativeQ, NonCommutativeQ."

(* SetCommutative *)
SetCommutative::usage = "\
SetCommutative[a,b,c,...] sets all the _Symbols_ a, b, c, ... to be commutative.

See also: SetNonCommutative, CommutativeQ, NonCommutativeQ."

(* NCSelfAdjointQ *)
NCSelfAdjointQ::usage = "\
NCSelfAdjointQ[expr] returns true if expr is self-adjoint, i.e. if aj[exp] == exp.

See also: NCSymmetricQ, NCSelfAdjointTest."

(* NCSelfAdjointTest *)
NCSelfAdjointTest::usage = "\
NCSelfAdjointTest[expr] attempts to establish whether expr is self-adjoint by assuming that some of its variables are self-adjoint or symmetric. NCSelfAdjointTest[expr,options] uses options.

NCSelfAdjointTest returns a list of three elements:

-   the first element is _True_ or _False_ if it succeded to prove expr self-adjoint.
-   the second element is a list of variables that were made self-adjoint.
-   the third element is a list of variables that were made symmetric.

The following options can be given:

-   SelfAdjointVariables: list of variables that should be considered self-adjoint; use All to make all variables self-adjoint;
-   SymmetricVariables: list of variables that should be considered symmetric; use All to make all variables symmetric;
-   ExcludeVariables: list of variables that should not be considered symmetric; use All to exclude all variables.

See also: NCSelfAdjointQ."

(* NonCommutativeQ *)
NonCommutativeQ::usage = "\
NonCommutativeQ[x] is equal to Not[CommutativeQ[x]].

See CommutativeQ."

(* CommutativeQ *)
CommutativeQ::usage = "\
CommutativeQ[x] is _True_ if x is commutative (the default), and _False_ if x is noncommutative.

See also: SetCommutative, SetNonCommutative."
