(*************************************************************************
 *         This file was automatically generated by md2usage.py          *
 *                   on 2017-06-02 09:08:36.629687                       *
 *************************************************************************)


(* rt *)
rt::usage = "\
rt[expr] is the root of expression expr.";

(* CommutingOperatorsQ *)
CommutingOperatorsQ::usage = "\
CommutingOperatorsQ[a,b] returns True if a and b are commuting operators.

See also: SetCommutingOperators, UnsetCommutingOperators";

(* EndCommuteEverything *)
EndCommuteEverything::usage = "\
EndCommuteEverything[expr] restores noncommutative behaviour to symbols affected by BeginCommuteEverything.

See also: BeginCommuteEverything, Commutative.";

(* SetCommutingOperators *)
SetCommutingOperators::usage = "\
SetCommutingOperators[a,b] will define a rule that substitute any noncommutative product b ** a by a ** b, effectively making the pair a and b commutative. If you want to create a rule to replace a ** b by b ** a use SetCommutingOperators[b,a] instead.

See also: UnsetCommutingOperators, CommutingOperatorsQ";

(* ExpandNonCommutativeMultiply *)
ExpandNonCommutativeMultiply::usage = "\
ExpandNonCommutativeMultiply[expr] expands out **s in expr.

For example

    ExpandNonCommutativeMultiply[a**(b+c)]

returns

    a**b + a**c.

See also: NCExpand, NCE.";

(* aj *)
aj::usage = "\
aj[expr] is the adjoint of expression expr. It is a conjugate linear involution.

See also: tp, co.";

(* co *)
co::usage = "\
co[expr] is the conjugate of expression expr. It is a linear involution.

See also: aj.";

(* NonCommutativeQ *)
NonCommutativeQ::usage = "\
NonCommutativeQ[expr] is equal to Not[CommutativeQ[expr]].

See also: CommutativeQ.";

(* SNC *)
SNC::usage = "\
SNC is an alias for SetNonCommutative.

See also: SetNonCommutative.";

(* inv *)
inv::usage = "\
inv[expr] is the 2-sided inverse of expression expr.

If Options[inv, Distrubute] is False (the default) then

    inv[a**b]

returns inv[a**a]. Conversely, if Options[inv, Distrubute] is True then it returns inv[b]**inv[a].";

(* NCExpand *)
NCExpand::usage = "\
NCExpand is an alias for ExpandNonCommutativeMultiply.

See also: ExpandNonCommutativeMultiply, NCE.";

(* SetNonCommutative *)
SetNonCommutative::usage = "\
SetNonCommutative[a,b,c,...] sets all the Symbols a, b, c, ... to be noncommutative.

See also: SetCommutative, CommutativeQ, NonCommutativeQ.";

(* Id *)
Id::usage = "\
Id is noncommutative multiplicative identity. Actually Id is now set equal 1.";

(* UnsetCommutingOperators *)
UnsetCommutingOperators::usage = "\
UnsetCommutingOperators[a,b] remove any rules previously created by SetCommutingOperators[a,b] or SetCommutingOperators[b,a].

See also: SetCommutingOperators, CommutingOperatorsQ";

(* tp *)
tp::usage = "\
tp[expr] is the tranpose of expression expr. It is a linear involution.

See also: aj, co.";

(* SetCommutative *)
SetCommutative::usage = "\
SetCommutative[a,b,c,...] sets all the Symbols a, b, c, ... to be commutative.

See also: SetNonCommutative, CommutativeQ, NonCommutativeQ.";

(* CommuteEverything *)
CommuteEverything::usage = "\
CommuteEverything[expr] is an alias for BeginCommuteEverything.

See also: BeginCommuteEverything, Commutative.";

(* NCE *)
NCE::usage = "\
NCE is an alias for ExpandNonCommutativeMultiply.

See also: ExpandNonCommutativeMultiply, NCExpand.";

(* Commutative *)
Commutative::usage = "\
Commutative[symbol] is commutative even if symbol is noncommutative.

See also: CommuteEverything, CommutativeQ, SetCommutative, SetNonCommutative.";

(* SetNonCommutativeHold *)
SetNonCommutativeHold::usage = "\
SetNonCommutativeHold[a,b,c,...] sets all the Symbols a, b, c, ... to be noncommutative.

SetNonCommutativeHold has attribute HoldAll and can be used to set Symbols which have already been assigned a value.

See also: SetCommutative, CommutativeQ, NonCommutativeQ.";

(* CommutativeQ *)
CommutativeQ::usage = "\
CommutativeQ[expr] is True if expression expr is commutative (the default), and False if expr is noncommutative.

See also: SetCommutative, SetNonCommutative.";

(* BeginCommuteEverything *)
BeginCommuteEverything::usage = "\
BeginCommuteEverything[expr] sets all symbols appearing in expr as commutative so that the resulting expression contains only commutative products or inverses. It issues messages warning about which symbols have been affected.

EndCommuteEverything[] restores the symbols noncommutative behaviour.

BeginCommuteEverything answers the question _what does it sound like?_

See also: EndCommuteEverything, Commutative.";
