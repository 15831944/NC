(*************************************************************************
 *         This file was automatically generated by md2usage.py          *
 *                   on 2017-04-14 07:48:32.811624                       *
 *************************************************************************)


(* SetNonCommutative *)
SetNonCommutative::usage = "\
SetNonCommutative[a,b,c,...] sets all the _Symbols_ a, b, c, ... to be noncommutative.

See also: SetCommutative, CommutativeQ, NonCommutativeQ.";

(* co *)
co::usage = "\
co[expr] is the conjugate of expression expr. It is a linear involution.

See also: aj.";

(* aj *)
aj::usage = "\
aj[expr] is the adjoint of expression expr. It is a conjugate linear involution.

See also: tp, co.";

(* rt *)
rt::usage = "\
rt[expr] is the root of expression expr.";

(* CommutativeQ *)
CommutativeQ::usage = "\
CommutativeQ[expr] is _True_ if expression expr is commutative (the default), and _False_ if expr is noncommutative.

See also: SetCommutative, SetNonCommutative.";

(* Commutative *)
Commutative::usage = "\
Commutative[symbol] is commutative even if symbol is noncommutative.

See also: CommuteEverything, CommutativeQ, SetCommutative, SetNonCommutative.";

(* NCE *)
NCE::usage = "\
NCE is an alias for ExpandNonCommutativeMultiply.

See also: ExpandNonCommutativeMultiply, NCExpand.";

(* Id *)
Id::usage = "\
Id is noncommutative multiplicative identity. Actually Id is now set equal 1.";

(* ExpandNonCommutativeMultiply *)
ExpandNonCommutativeMultiply::usage = "\
ExpandNonCommutativeMultiply[expr] expands out **s in expr.

For example

    ExpandNonCommutativeMultiply[a**(b+c)]

returns

    a**b+a**c.

See also: NCExpand, NCE.";

(* tp *)
tp::usage = "\
tp[expr] is the tranpose of expression expr. It is a linear involution.

See also: aj, co.";

(* NonCommutativeQ *)
NonCommutativeQ::usage = "\
NonCommutativeQ[expr] is equal to Not[CommutativeQ[expr]].

See also: CommutativeQ.";

(* CommuteEverything *)
CommuteEverything::usage = "\
CommuteEverything[expr] is an alias for BeginCommuteEverything.

See also: BeginCommuteEverything, Commutative.";

(* SNC *)
SNC::usage = "\
SNC is an alias for SetNonCommutative.

See also: SetNonCommutative.";

(* inv *)
inv::usage = "\
inv[expr] is the 2-sided inverse of expression expr.

If Options[inv, Distrubute] is False (the default) then

    inv[a**b]

returns inv[a**a]. Conversely, if Options[inv, Distrubute] is True then it returns inv[b]**inv[a].";

(* NCExpand *)
NCExpand::usage = "\
NCExpand is an alias for ExpandNonCommutativeMultiply.

See also: ExpandNonCommutativeMultiply, NCE.";

(* BeginCommuteEverything *)
BeginCommuteEverything::usage = "\
BeginCommuteEverything[expr] sets all symbols appearing in expr as commutative so that the resulting expression contains only commutative products or inverses. It issues messages warning about which symbols have been affected.

EndCommuteEverything[] restores the symbols noncommutative behaviour.

BeginCommuteEverything answers the question _what does it sound like?_

See also: EndCommuteEverything, Commutative.";

(* EndCommuteEverything *)
EndCommuteEverything::usage = "\
EndCommuteEverything[expr] restores noncommutative behaviour to symbols affected by BeginCommuteEverything.

See also: BeginCommuteEverything, Commutative.";

(* SetCommutative *)
SetCommutative::usage = "\
SetCommutative[a,b,c,...] sets all the _Symbols_ a, b, c, ... to be commutative.

See also: SetNonCommutative, CommutativeQ, NonCommutativeQ.";
