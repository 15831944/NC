(*************************************************************************
 *         This file was automatically generated by md2usage.py          *
 *                   on 2016-10-24 16:26:38.339394                       *
 *************************************************************************)


(* NCMatrixOfQuadratic *)
NCMatrixOfQuadratic::usage = "\
NCMatrixOfQuadratic[p, vars] gives a factorization of the symmetric quadratic function p in noncommutative variables vars and their transposes.

NCMatrixOfQuadratic checks for symmetry and automatically sets variables to be symmetric if possible.

Internally it uses NCQuadratic and NCQuadraticMakeSymmetric.

It returns a list of three elements:

-   the first is the left border row vector;
-   the second is the middle matrix;
-   the third is the right border column vector.

For example:

    expr = x**y**x + z**x**x**z;
    {left,middle,right}=NCMatrixOfQuadratics[expr, {x}];

returns:

    left={x, z**x}
    middle=SparseArray[{{y,0},{0,1}}]
    right={x,x**z}

The answer from NCMatrixOfQuadratics always satisfies p = MatMult[left,middle,right].

See also: NCQuadratic, NCQuadraticMakeSymmetric.";

(* NCQuadraticMakeSymmetric *)
NCQuadraticMakeSymmetric::usage = "\
NCQuadraticMakeSymmetric[{p0, sylv, left, middle, right}] takes the output of NCQuadratic and produces, if possible, an equivalent symmetric representation in which Map[tp, left] = right and middle is a symmetric matrix.

See also: NCQuadratic.";

(* NCQuadratic *)
NCQuadratic::usage = "\
NCQuadratic[p] gives an expanded representation for the quadratic NCPolynomial p.

NCQuadratic returns a list with four elements:

-   the first element is the independent term;
-   the second represents the linear part as in NCSylvester;
-   the third element is a list of left NC symbols;
-   the fourth element is a numeric SparseArray;
-   the fifth element is a list of right NC symbols.

Example:

    exp = d + x + x**x + x**a**x + x**e**x + x**b**y**d + d**y**c**y**d;
    vars = {x,y};
    p = NCToNCPolynomial[exp, vars];
    {p0,sylv,left,middle,right} = NCQuadratic[p];

produces

    p0 = d
    sylv = <|x->{{1},{1},SparseArray[{{1}}]}, y->{{},{},{}}|>
    left =  {x,d**y}
    middle = SparseArray[{{1+a+e,b},{0,c}}]
    right = {x,y**d}

See also: NCSylvester,NCQuadraticToNCPolynomial,NCPolynomial.";
