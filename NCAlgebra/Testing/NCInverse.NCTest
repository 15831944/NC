(* History:  06/26/01:  NCInverse tests (jeff)   *)

(* Nov 2015 Mauricio : From A,B,C,D to a,b,c,d BEGIN *)
(*
SNC[a,b,c,d];
*)

(*NCInverse uses the formula shown in test 1 to compute the inverse of a 
  2x2 matrix.  Larger matrices are handled by "divide and conquer" - the matrix
  is thought of as being block 2x2, and the problem is reduced inductively in 
  this way until it is truly working at the 2x2 level.  Tests 2 and 3 show that
  sometimes the program must be specifically told to simplify and expression*)

Module[
  {k, a, b, c, d, x, y, mat, invmat, answer}, 

  k = 1;

  SetNonCommutative[a, b, c, d, x, y];

  NCTest[NCInverse[{{0,1},{1,0}}], {{0,1},{1,0}}, "NCInverse", k++];

  mat = {{a,b},{c,d}};
  invmat = NCInverse[mat];
  answer = {{inv[a]+inv[a]**b**inv[d-c**inv[a]**b]**c**inv[a], 
              -inv[a]**b **inv[d-c**inv[a]**b]},
            {-inv[d-c**inv[a]**b]**c**inv[a], inv[d-c**inv[a]**b]}};
  NCTest[invmat, answer, "NCInverse", k++];

  NCTest[NCSimplifyRational[NCInverse[NCInverse[{{a,b},{0,d}}]]],
         {{a,b},{0,d}}, "NCInverse", k++];

  NCTest[NCSimplifyRational[MatMult[invmat,mat]],
         {{1,0},{0,1}}, "NCInverse", k++];

  mat = {{a,0},{c,d}};
  invmat = NCInverse[mat];
  answer = {{inv[a], 0},
            {-inv[d]**c**inv[a], inv[d]}};
  NCTest[invmat, answer, "NCInverse", k++];

  (* Tests 4, 5 and 6 demonstrate that either NCInverse or NCSimplifyRational 
     sometimes have difficulty doing their jobs*)
  (*
  mat = {{tp[x], 0, 3}, {y, inv[y], 1}, {2, x ** y, 0}};
  invmat = NCInverse[mat];

  Print[mat];
  Print[invmat];

  NCTest[NCSimplifyRational[MatMult[mat, invmat]], 
         {{1,0,0},{0,1,0},{0,0,1}}, "NCInverse", k++];
  NCTest[NCSimplifyRational[MatMult[mat, invmat]], 
         {{1,0,0},{0,1,0},{0,0,1}}, "NCInverse", k++];
  *)


];  
