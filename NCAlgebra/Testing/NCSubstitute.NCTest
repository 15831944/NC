<< NCSubstitute`

Module[
     {rule, expr, answer, 
      a,b,c,d,e, K},

     SetCommutative[K];
     SetNonCommutative[a,b,c,d,e];

     rule = a -> b;

     expr = a;

     answer = b;
     NCTest[expr /. rule, answer];
     NCTest[NCReplace[expr,rule], answer];
     NCTest[NCReplaceAll[expr,rule], answer];
     NCTest[NCReplaceRepeated[expr,rule], answer];

     expr = a**b;

     answer = b**b;
     NCTest[expr /. rule, answer];
     NCTest[NCReplace[expr,rule], expr];
     NCTest[NCReplaceAll[expr,rule], answer];
     NCTest[NCReplaceRepeated[expr,rule], answer];

     expr = a**b + b**inv[1+a] + b**inv[a];

     answer = 1 + b**b + b**inv[1+b];
     NCTest[expr /. rule, answer];
     NCTest[NCReplace[expr,rule], expr];
     NCTest[NCReplaceAll[expr,rule], answer];
     NCTest[NCReplaceRepeated[expr,rule], answer];

     rule = a**b -> c;

     expr = a**b**c;

     answer = expr;
     NCTest[expr /. rule, answer];
     NCTest[NCReplace[expr,rule], expr];

     answer = c**c;
     NCTest[NCReplaceAll[expr,rule], answer];
     NCTest[NCReplaceRepeated[expr,rule], answer];

     expr = a**b + a**b**c + d**a**b + d**a**b**c;

     answer = c + c**c + d**c + d**c**c;
     NCTest[NCReplace[expr,rule], expr];
     NCTest[NCReplaceAll[expr,rule], answer];
     NCTest[NCReplaceRepeated[expr,rule], answer];

     rule = a**b -> a;

     expr = a**b**b**c;

     answer = expr;
     NCTest[expr /. rule, answer];
     NCTest[NCReplace[expr,rule], expr];

     answer = a**b**c;
     NCTest[NCReplaceAll[expr,rule], answer];

     answer = a**c;
     NCTest[NCReplaceRepeated[expr,rule], answer];

     expr = a**b**b + a**b**c + d**a**b + d**a**b**c;

     answer = a**b + a**c + d**a + d**a**c;
     NCTest[NCReplace[expr,rule], expr];
     NCTest[NCReplaceAll[expr,rule], answer];

     answer = a + a**c + d**a + d**a**c;
     NCTest[NCReplaceRepeated[expr,rule], answer];

     expr = inv[1 + A x] ** x;
     rule = d___ ** inv[1 + K_. a_] ** a_ ** e___ :> 
              (1/K) d ** e - (1/K) d ** inv[1 + K a] ** e;
     answer = (1/A) - (1/A) inv[1 + A x];
     NCTest[NCReplaceRepeated[expr,rule], answer];

     expr = inv[1 + x] ** x;
     rule = d___ ** inv[1 + K_. a_] ** a_ ** e___ :> 
              (1/K) d ** e - (1/K) d ** inv[1 + K a] ** e;
     answer = 1 - inv[1 + x];
     NCTest[NCReplaceRepeated[expr,rule], answer];

     (* NCMakeRuleSymmetric *)

     rule = a -> b;
     answer = {a -> b, tp[a] -> tp[b]};
     NCTest[NCMakeRuleSymmetric[rule], answer];

     rule = a :> b;
     answer = {a :> b, tp[a] :> tp[b]};
     NCTest[NCMakeRuleSymmetric[rule], answer];

     rule = {a -> b, c -> d};
     answer = {a -> b, tp[a] -> tp[b], c -> d, tp[c] -> tp[d]};
     NCTest[NCMakeRuleSymmetric[rule], answer];

     rule = {a :> b, c :> d};
     answer = {a :> b, tp[a] :> tp[b], c :> d, tp[c] :> tp[d]};
     NCTest[NCMakeRuleSymmetric[rule], answer];

     rule = {a -> b, c :> d};
     answer = {a -> b, tp[a] -> tp[b], c :> d, tp[c] :> tp[d]};
     NCTest[NCMakeRuleSymmetric[rule], answer];

     rule = {{a -> b, c -> d}, {a -> -b, c -> 2d}};
     answer = {{a -> b, tp[a] -> tp[b], c -> d, tp[c] -> tp[d]},
               {a -> -b, tp[a] -> -tp[b], c -> 2d, tp[c] -> 2tp[d]}};
     NCTest[NCMakeRuleSymmetric[rule], answer];

     (* NCMakeRuleSelfAdjoint *)

     rule = a -> b;
     answer = {a -> b, aj[a] -> aj[b]};
     NCTest[NCMakeRuleSelfAdjoint[rule], answer];

     rule = a :> b;
     answer = {a :> b, aj[a] :> aj[b]};
     NCTest[NCMakeRuleSelfAdjoint[rule], answer];

     rule = {a -> b, c -> d};
     answer = {a -> b, aj[a] -> aj[b], c -> d, aj[c] -> aj[d]};
     NCTest[NCMakeRuleSelfAdjoint[rule], answer];

     rule = {a :> b, c :> d};
     answer = {a :> b, aj[a] :> aj[b], c :> d, aj[c] :> aj[d]};
     NCTest[NCMakeRuleSelfAdjoint[rule], answer];

     rule = {a -> b, c :> d};
     answer = {a -> b, aj[a] -> aj[b], c :> d, aj[c] :> aj[d]};
     NCTest[NCMakeRuleSelfAdjoint[rule], answer];

     rule = {{a -> b, c -> d}, {a -> -b, c -> 2d}};
     answer = {{a -> b, aj[a] -> aj[b], c -> d, aj[c] -> aj[d]},
               {a -> -b, aj[a] -> -aj[b], c -> 2d, aj[c] -> 2aj[d]}};
     NCTest[NCMakeRuleSelfAdjoint[rule], answer];

];
