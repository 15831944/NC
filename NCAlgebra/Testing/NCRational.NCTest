<< NCRealization`
<< NCRational`

Module[
  {k,answer,answer1,answer2,x,y,X,W,
   expr,rat,vars,poly,
   Cv,Pencil,Bv,
   CSym, PencilSym,
   det
  },

  SetNonCommutative[x,y];
  SetCommutative[A,B];

  (* CommutativeQ *)
  vars = {x,y};
  poly = 1;
  expr = NCToNCRational[poly, vars];
  answer = NCRational[
             SparseArray[{},{3,0,0}],
             SparseArray[{},{0,1}], 
             SparseArray[{},{1,0}], 
	     SparseArray[{{poly}}], vars, {Linear->True}];
  NCTest[expr, answer];
  NCTest[NCROrder[expr], 0];
  NCTest[NCRationalToNC[expr], SparseArray[{{poly}}]];

  poly = A+B;
  expr = NCToNCRational[poly, vars];
  answer = NCRational[
             SparseArray[{},{3,0,0}],
             SparseArray[{},{0,1}], 
             SparseArray[{},{1,0}], 
	     SparseArray[{{poly}}], vars, {Linear->True}];
  NCTest[expr, answer];
  NCTest[NCROrder[expr], 0];
  NCTest[NCRationalToNC[expr], SparseArray[{{poly}}]];

  (* Monomials *)

  poly = x;
  vars = {x,y};
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, -1}, {0, 0}}, 
               {{0, 0}, {0, 0}}}],
             SparseArray[{{0}, {1}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{0}}], vars, {Linear->True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = y;
  vars = {x,y};
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, 0}, {0, 0}}, 
               {{0, -1}, {0, 0}}}],
             SparseArray[{{0}, {1}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{0}}], vars, {Linear->True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = A x;
  vars = {x,y};
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, -1}, {0, 0}}, 
               {{0, 0}, {0, 0}}}],
             SparseArray[{{0}, {A}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{0}}], vars, {Linear->True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = B + A x;
  vars = {x,y};
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, -A}, {0, 0}}, 
               {{0, 0}, {0, 0}}}],
             SparseArray[{{0}, {1}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{B}}], vars, {Linear->True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];
  
  poly = A x + B y;
  vars = {x,y};
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, -A}, {0, 0}}, 
               {{0, -B}, {0, 0}}}],
             SparseArray[{{0}, {1}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{0}}], vars, {Linear->True}];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = x**y;
  vars = {x,y};
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, 
               {{0, -1, 0}, {0, 0, 0}, {0, 0, 0}}, 
               {{0, 0, 0}, {0, 0, -1}, {0, 0, 0}}}],
             SparseArray[{{0}, {0}, {1}}], 
             SparseArray[{{1, 0, 0}}], 
	     SparseArray[{{0}}], vars];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

];

If[ 0,

  expr = NCRMinimalRealization[expr];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

  expr = NCRTranspose[expr];
  answer = NCRational[
             SparseArray[{
               {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, 
               Transpose[{{0, -1, 0}, {0, 0, 0}, {0, 0, 0}}], 
               Transpose[{{0, 0, 0}, {0, 0, -1}, {0, 0, 0}}]}],
             SparseArray[{{1}, {0}, {0}}], 
             SparseArray[{{0, 0, 1}}], 
	     SparseArray[{{0}}], vars];
  NCTest[expr == answer, True];
  NCTest[NCROrder[expr], 3];

  poly = y**x;
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, 
               {{0, 0, 0}, {0, 0, -1}, {0, 0, 0}}, 
               {{0, -1, 0}, {0, 0, 0}, {0, 0, 0}}}],
             SparseArray[{{0}, {0}, {1}}], 
             SparseArray[{{1, 0, 0}}], 
	     SparseArray[{{0}}], vars];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

  expr = NCRMinimalRealization[expr];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

  poly = x**x;
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, 
               {{0, -1, 0}, {0, 0, -1}, {0, 0, 0}}, 
               {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}}],
             SparseArray[{{0}, {0}, {1}}], 
             SparseArray[{{1, 0, 0}}], 
	     SparseArray[{{0}}], vars];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

  expr = NCRMinimalRealization[expr];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 3];

  poly = x**y**x;
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1,0,0,0}, {0,1,0,0}, {0,0,1,0}, {0,0,0,1}}, 
               {{0,-1,0,0}, {0,0,0,0}, {0,0,0,-1},{0,0,0,0}}, 
               {{0,0,0,0}, {0,0,-1,0}, {0,0,0,0}, {0,0,0,0}}}],
             SparseArray[{{0}, {0}, {0}, {1}}], 
             SparseArray[{{1, 0, 0, 0}}], 
	     SparseArray[{{0}}], vars];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 4];

  expr = NCRMinimalRealization[expr];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 4];

  (* Nonmiminal monomial *)

  rat = NCRational[
          {{{0, -1, 0, 0}, {-1, 0, 0, 1}, {0, 0, 0, 1}, {0, 0, 1, 0}}, 
           {{1, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}}, 
           {{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, -1, 0}, {0, 0, 0, 0}}}, 
          {{0}, {0}, {0}, {1}}, 
          {{0, 1, 0, 0}}, {{0}}, vars];
  expr = NCRationalToNC[rat];
  answer = {{x**y}};
  NCTest[expr,answer];

  expr = NCRControllableRealization[rat];
  NCTest[NCRationalToNC[expr],NCRationalToNC[rat]];
  answer = NCRational[{
             {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, 
             {{0, 0, 0}, {0, 0, 0}, {0, -1, 0}}, 
             {{0, 0, 0}, {-1, 0, 0}, {0, 0, 0}}}, 
            {{1}, {0}, {0}}, {{0, 0, 1}}, {{0}}, vars];
  NCTest[expr,answer];
  answer = {{{{0, 0, 1}},
             {{1, 0, 0}, {-y, 1, 0}, {0, -x, 1}}, 
             {{1}, {0}, {0}}, {{0}}}, vars};
  NCTest[NCRationalToCanonical[expr],answer];

  expr = NCRObservableRealization[rat];
  NCTest[NCRationalToNC[expr],NCRationalToNC[rat]];
  answer = NCRational[{
             {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, 
             {{0, 1, 0}, {0, 0, 0}, {0, 0, 0}}, 
             {{0, 0, 0}, {0, 0, -1}, {0, 0, 0}}}, 
             {{0}, {0}, {1}}, {{-1, 0, 0}}, {{0}}, vars];
  NCTest[expr,answer];
  answer = {{{{-1, 0, 0}},
             {{1, x, 0}, {0, 1, -y}, {0, 0, 1}}, 
             {{0}, {0}, {1}}, {{0}}}, vars};
  NCTest[NCRationalToCanonical[expr],answer];

  expr = NCRMinimalRealization[rat];
  NCTest[NCRationalToNC[expr],NCRationalToNC[rat]];
  answer = NCRational[{
             {{1, 0, 0}, {0, 1, 0}, {0, 0, 1}}, 
             {{0, 0, 0}, {0, 0, 0}, {0, -1, 0}}, 
             {{0, 0, 0}, {-1, 0, 0}, {0, 0, 0}}}, 
            {{1}, {0}, {0}}, {{0, 0, 1}}, {{0}}, vars];
  NCTest[expr,answer];

  (* Polynomials *)

  poly = 1 + x;
  vars = {x,y};
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, -1}, {0, 0}}, 
               {{0, 0}, {0, 0}}}],
             SparseArray[{{0}, {1}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{1}}], vars];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = 1 + y;
  vars = {x,y};
  expr = NCToNCRational[poly, {x,y}];
  answer = NCRational[
             SparseArray[{
               {{1, 0}, {0, 1}}, 
               {{0, 0}, {0, 0}}, 
               {{0, -1}, {0, 0}}}],
             SparseArray[{{0}, {1}}], 
             SparseArray[{{1,0}}], 
	     SparseArray[{{1}}], vars];
  NCTest[expr == answer, True];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = 2 + 3 x;
  vars = {x,y};
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCRationalToNC[expr],{{poly}}];
  NCTest[NCROrder[expr], 2];

  poly = 1 + x**y;
  rat = NCToNCRational[poly, {x,y}];
  NCTest[NCRationalToNC[rat],{{poly}}];
  NCTest[NCROrder[rat], 3];

  expr = NCRControllableRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 3];

  expr = NCRObservableRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 3];

  expr = NCRMinimalRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 3];

  poly = 1 + 2 x**y;
  rat = NCToNCRational[poly, {x,y}];
  NCTest[NCRationalToNC[rat],{{poly}}];
  NCTest[NCROrder[rat], 3];

  expr = NCRControllableRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 3];

  expr = NCRObservableRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 3];

  expr = NCRMinimalRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 3];

  poly = x**y+y**x;
  rat = NCToNCRational[poly, {x,y}];
  NCTest[NCRationalToNC[rat],{{poly}}];
  NCTest[NCROrder[rat], 6];

  expr = NCRControllableRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 5];

  expr = NCRObservableRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 5];

  expr = NCRMinimalRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 4];

  poly = x**y+x**x;
  rat = NCToNCRational[poly, {x,y}];
  NCTest[NCRationalToNC[rat],{{poly}}];
  NCTest[NCROrder[rat], 6];

  expr = NCRControllableRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 5];

  expr = NCRObservableRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 4];

  expr = NCRMinimalRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 3];

  poly = x**y+x**x+y**x;
  rat = NCToNCRational[poly, {x,y}];
  NCTest[NCRationalToNC[rat],{{poly}}];
  NCTest[NCROrder[rat], 9];

  expr = NCRControllableRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 6];

  expr = NCRObservableRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 6];

  expr = NCRMinimalRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 4];

  poly = 1+x**y+x**x+y**x;
  rat = NCToNCRational[poly, {x,y}];
  NCTest[NCRationalToNC[rat],{{poly}}];
  NCTest[NCROrder[rat], 9];

  expr = NCRControllableRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 6];

  expr = NCRObservableRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 6];

  expr = NCRMinimalRealization[rat];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr], 4];

  poly = (1+x)**(1+y)**(1+x);
  rat = NCToNCRational[poly, {x,y}];
  NCTest[NCExpand[NCRationalToNC[rat]],{{NCExpand[poly]}}];
  NCTest[NCROrder[rat], 6];

  expr = NCRControllableRealization[rat];
  NCTest[NCExpand[NCRationalToNC[expr]],{{NCExpand[poly]}}];
  NCTest[NCROrder[rat], 6];

  expr = NCRObservableRealization[rat];
  NCTest[NCExpand[NCRationalToNC[expr]],{{NCExpand[poly]}}];
  NCTest[NCROrder[rat], 6];

  expr = NCRMinimalRealization[rat];
  NCTest[NCExpand[NCRationalToNC[expr]],{{NCExpand[poly]}}];
  NCTest[NCROrder[rat], 6];

  (* rational *)

  poly = inv[x];
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],1];

  poly = 1 + inv[x];
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],1];

  poly = 1 + 2 inv[x];
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],1];

  poly = 1 + 2 inv[1 + x];
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],1];

  poly = 1 + 2 inv[1 + 3 x];
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],1];

  poly = 1 + 2 inv[1 + x ** y];
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{NCSimplifyRational[poly]}}];
  NCTest[NCROrder[expr],3];

  poly = 1 + 2 inv[1 + 3 x ** y];
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{NCSimplifyRational[poly]}}];
  NCTest[NCROrder[expr],3];

  poly = 1 + y**x - 2 inv[1 + 3 x ** y];
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{NCSimplifyRational[poly]}}];
  NCTest[NCROrder[expr],6];

  expr = NCRMinimalRealization[expr];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],5];

  (* products with inverses *)

  poly = inv[x]**y;
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],3];

  poly = x**inv[y];
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],3];

  poly = x**x**inv[y]**x;
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],6];

  poly = x**x**inv[y]**x**y**inv[x];
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],3+1+3+1];

  poly = inv[1 + x]**y;
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{poly}}];
  NCTest[NCROrder[expr],3];

  poly = inv[1 + x]**(1+y);
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{NCSimplifyRational[poly]}}];
  NCTest[NCROrder[expr],3];

  poly = inv[1 + 3 x]**(1 + 2 y);
  expr = NCToNCRational[poly, {x,y}];
  NCTest[NCSimplifyRational[NCRationalToNC[expr]],{{NCSimplifyRational[poly]}}];
  NCTest[NCROrder[expr],3];

  (*
  Print["expr = ", Map[Normal,expr]];
  Print["expr = ", NCSimplifyRational[NCRationalToNC[expr]]];
  *)

  (* TODO: FAIL WHEN IT IS NOT RATIONAL *)

];
