Block[{expr, k},

  k = 1;
  NCTest[CommutativeQ[aj] == False, "Adjoints", k++];

  NCTest[aj[0], 0, "Adjoints", k++];
  NCTest[aj[1], 1, "Adjoints", k++];
  NCTest[aj[Pi], Pi, "Adjoints", k++];
  NCTest[aj[I], -I, "Adjoints", k++];
  NCTest[aj[1 + I], 1 - I, "Adjoints", k++];

  saveExpandQ = ExpandQ[aj];

  SetExpandQ[aj, True];

  NCTest[aj[2 a], 2 aj[a], "Adjoints", k++];
  NCTest[aj[3 a ** b], Unevaluated[3 aj[b] ** aj[a]], "Adjoints", k++];
  NCTest[aj[(3 + I) a ** b], Unevaluated[Complex[3,-1] aj[b] ** aj[a]], "Adjoints", k++];

  expr = aj[a**b];
  NCTest[expr, Unevaluated[aj[b] ** aj[a]], "Adjoints", k++];

  expr = aj[b]**aj[a];
  NCTest[expr, Unevaluated[aj[b] ** aj[a]], "Adjoints", k++];

  expr = c**aj[a**b];
  NCTest[expr, Unevaluated[c ** aj[b] ** aj[a]], "Adjoints", k++];

  expr = aj[a**b]**d;
  NCTest[expr, Unevaluated[aj[b] ** aj[a] ** d], "Adjoints", k++];

  expr = c**aj[a**b]**d;
  NCTest[expr, Unevaluated[c ** aj[b] ** aj[a] ** d], "Adjoints", k++];

  SetExpandQ[aj, False];

  expr = aj[a**b];
  NCTest[expr, Unevaluated[aj[a ** b]], "Adjoints", k++];

  expr = aj[b]**aj[a];
  NCTest[expr, Unevaluated[aj[a ** b]], "Adjoints", k++];

  expr = c**aj[b]**aj[a];
  NCTest[expr, Unevaluated[c ** aj[a ** b]], "Adjoints", k++];

  expr = aj[b]**aj[a]**d;
  NCTest[expr, Unevaluated[aj[a ** b] ** d], "Adjoints", k++];

  expr = c**aj[b]**aj[a]**d;
  NCTest[expr, Unevaluated[c ** aj[a ** b] ** d], "Adjoints", k++];

  SetExpandQ[aj, saveExpandQ];

  expr = aj[a+b];
  NCTest[expr, Unevaluated[aj[a] + aj[b]], "Adjoints", k++];

];
