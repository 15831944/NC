<< NCMatrixDecompositions`

Module[
  {k,a,b,c,d,e,f,lu,p,q,rank,l1,u1,mat,mati,x,y,A,B},

  k = 1;

  SetNonCommutative[a,b,c,d,e,f];

  mat = {{1,2},{3,4}};
  NCTest[NCLUPartialPivoting[mat], 2, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {2,2}, "NCMatrixDecompositions", k++];

  mat = -{{1,2},{3,4}};
  NCTest[NCLUPartialPivoting[mat], 2, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {2,2}, "NCMatrixDecompositions", k++];

  mat = {{3,1},{4,2}};
  NCTest[NCLUPartialPivoting[mat], 2, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {2,1}, "NCMatrixDecompositions", k++];

  mat = {{2,4},{3,1}};
  NCTest[NCLUPartialPivoting[mat], 2, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {1,2}, "NCMatrixDecompositions", k++];

  mat = {{-5,4},{3,1}};
  NCTest[NCLUPartialPivoting[mat], 1, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {1,1}, "NCMatrixDecompositions", k++];

  mat = {{0,4},{3,0}};
  NCTest[NCLUPartialPivoting[mat], 2, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {1,2}, "NCMatrixDecompositions", k++];

  mat = {{2,4},{3,1},{0,5}};
  NCTest[NCLUPartialPivoting[mat], 2, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {3,2}, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[Transpose[mat]], {2,3}, "NCMatrixDecompositions", k++];

  mat = {{a,b},{c,d}};
  NCTest[NCLUPartialPivoting[mat], 2, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {2,2}, "NCMatrixDecompositions", k++];

  mat = {{a,-b},{-c,d}};
  NCTest[NCLUPartialPivoting[mat], 1, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {2,2}, "NCMatrixDecompositions", k++];

  mat = {{0,b},{c,0}};
  NCTest[NCLUPartialPivoting[mat], 2, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {2,1}, "NCMatrixDecompositions", k++];

  mat = {{0,b},{-c,0}};
  NCTest[NCLUPartialPivoting[mat], 2, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {1,2}, "NCMatrixDecompositions", k++];

  mat = {{a,b},{1,d}};
  NCTest[NCLUPartialPivoting[mat], 2, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {2,1}, "NCMatrixDecompositions", k++];

  mat = {{0,b},{0,d}};
  NCTest[NCLUPartialPivoting[mat], 2, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {2,2}, "NCMatrixDecompositions", k++];

  mat = {{3,b},{1,d}};
  NCTest[NCLUPartialPivoting[mat], 1, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {1,1}, "NCMatrixDecompositions", k++];

  mat = {{1,b},{3,d}};
  NCTest[NCLUPartialPivoting[mat], 2, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {2,1}, "NCMatrixDecompositions", k++];

  mat = {{1,b},{-3,d}};
  NCTest[NCLUPartialPivoting[mat], 2, "NCMatrixDecompositions", k++];
  NCTest[NCLUCompletePivoting[mat], {2,1}, "NCMatrixDecompositions", k++];

  mat = {{a,b},{c,d}};
  NCTest[NCRightDivideBy[mat[[All,1]], mat[[1,1]]], 
         {1, c ** inv[a]}, "NCMatrixDecompositions", k++];

  NCTest[NCLeftDivideBy[mat[[All,1]], mat[[1,1]]], 
         {1, inv[a] ** c}, "NCMatrixDecompositions", k++];

  (* LU Decomposition With Partial Pivoting *)
 
  mat = {{a,b},{0,d}};

  {lu, p} = NCLUDecompositionWithPartialPivoting[mat];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[MatMult[l1,u1]], mat[[p]], "NCMatrixDecompositions", k++];


  mat = {{a,b},{c,d}};
  {lu, p} = NCLUDecompositionWithPartialPivoting[mat];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[MatMult[l1,u1]], mat[[p]], "NCMatrixDecompositions", k++];

  mat = {{0,b},{c,0}};
  {lu, p} = NCLUDecompositionWithPartialPivoting[mat];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[MatMult[l1,u1]], mat[[p]], "NCMatrixDecompositions", k++];

  mat = {{a,b},{2a,2b}};
  {lu, p} = NCLUDecompositionWithPartialPivoting[mat];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[MatMult[l1,u1]], mat[[p]], "NCMatrixDecompositions", k++];

  mat = {{a,b},{2a,2b}};
  {lu, p} = NCLUDecompositionWithPartialPivoting[mat];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[MatMult[l1,u1]], mat[[p]], "NCMatrixDecompositions", k++];

  (* LU Decomposition With Complete Pivoting *)
 
  mat = {{a,b},{0,d}};
  {lu, p, q, rank} = NCLUDecompositionWithCompletePivoting[mat];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[MatMult[l1,u1]], mat[[p, q]], "NCMatrixDecompositions", k++];
  NCTest[rank, 2, "NCMatrixDecompositions", k++];

  mat = {{a,b},{c,d}};
  {lu, p, q, rank} = NCLUDecompositionWithCompletePivoting[mat];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[MatMult[l1,u1]], mat[[p, q]], "NCMatrixDecompositions", k++];
  NCTest[rank, 2, "NCMatrixDecompositions", k++];

  mat = {{0,b},{c,0}};
  {lu, p, q, rank} = NCLUDecompositionWithCompletePivoting[mat];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[MatMult[l1,u1]], mat[[p, q]], "NCMatrixDecompositions", k++];
  NCTest[rank, 2, "NCMatrixDecompositions", k++];

  mat = {{a,b},{2a,2b}};
  {lu, p, q, rank} = NCLUDecompositionWithCompletePivoting[mat];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[MatMult[l1,u1]], mat[[p, q]], "NCMatrixDecompositions", k++];
  NCTest[rank, 1, "NCMatrixDecompositions", k++];

  mat = {{a,b},{2a,2b}};
  {lu, p, q, rank} = NCLUDecompositionWithCompletePivoting[mat];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[MatMult[l1,u1]], mat[[p, q]], "NCMatrixDecompositions", k++];
  NCTest[rank, 1, "NCMatrixDecompositions", k++];

  (* back/forward substitution *)
  mat = {{a,b},{0,d}};

  {lu, p} = NCLUDecompositionWithPartialPivoting[mat];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[MatMult[l1,u1]], mat[[p]], "NCMatrixDecompositions", k++];

  (* Print[]; Print["mat = ", Normal[mat]]; Print["l1 = ", Normal[l1]]; Print["u1 = ", Normal[u1]]; Print["p = ", p]; *)

  A = l1;
  B = IdentityMatrix[2];  
  x = NCLowerTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];
  (* Print[]; Print["A = ", Normal[A]]; Print["B = ", B]; Print["x = ", x]; *)

  A = tpMat[l1];
  x = NCUpperTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];

  B = IdentityMatrix[2][[p]];  
  A = l1;
  x = NCLowerTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];

  A = u1;
  B = x;
  x = NCUpperTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];
  NCTest[NCSimplifyRational[MatMult[Normal[x],mat]], IdentityMatrix[2], "MatrixDecompositions", k++];

  mat = {{a,0},{c,d}};

  {lu, p} = NCLUDecompositionWithPartialPivoting[mat];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[MatMult[l1,u1]], mat[[p]], "NCMatrixDecompositions", k++];

  (* Print[]; Print["mat = ", Normal[mat]]; Print["l1 = ", Normal[l1]]; Print["u1 = ", Normal[u1]]; Print["p = ", p]; *)

  A = l1;
  B = IdentityMatrix[2];  
  x = NCLowerTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];
  (* Print[]; Print["A = ", Normal[A]]; Print["B = ", B]; Print["x = ", x]; *)

  A = tpMat[l1];
  x = NCUpperTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];

  B = IdentityMatrix[2][[p]];  
  A = l1;
  x = NCLowerTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];

  A = u1;
  B = x;
  x = NCUpperTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];
  NCTest[NCSimplifyRational[MatMult[Normal[x],mat]], IdentityMatrix[2], "MatrixDecompositions", k++];

  mat = {{a,b},{c,d}};

  {lu, p} = NCLUDecompositionWithPartialPivoting[mat];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[MatMult[l1,u1]], mat[[p]], "NCMatrixDecompositions", k++];

  (* Print[]; Print["mat = ", Normal[mat]]; Print["l1 = ", Normal[l1]]; Print["u1 = ", Normal[u1]]; Print["p = ", p]; *)

  A = l1;
  B = IdentityMatrix[2];  
  x = NCLowerTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];
  (* Print[]; Print["A = ", Normal[A]]; Print["B = ", B]; Print["x = ", x]; *)

  A = tpMat[l1];
  x = NCUpperTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];

  B = IdentityMatrix[2][[p]];  
  A = l1;
  x = NCLowerTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];

  A = u1;
  B = x;
  x = NCUpperTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];
  NCTest[NCSimplifyRational[MatMult[Normal[x],mat]], IdentityMatrix[2], "MatrixDecompositions", k++];

  mat = {{a,b,0},{0,c,d},{0,e,f}};

  {lu, p} = NCLUDecompositionWithPartialPivoting[mat];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[MatMult[l1,u1]], mat[[p]], "NCMatrixDecompositions", k++];

  (* Print[]; Print["mat = ", Normal[mat]]; Print["l1 = ", Normal[l1]]; Print["u1 = ", Normal[u1]]; Print["p = ", p]; *)

  A = l1;
  B = IdentityMatrix[3];  
  x = NCLowerTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];
  (* Print[]; Print["A = ", Normal[A]]; Print["B = ", B]; Print["x = ", x]; *)

  A = tpMat[l1];
  x = NCUpperTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];

  B = IdentityMatrix[3][[p]];  
  A = l1;
  x = NCLowerTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];

  A = u1;
  B = x;
  x = NCUpperTriangularSolve[A, B];
  NCTest[Normal[MatMult[A,x]], B, "MatrixDecompositions", k++];
  NCTest[NCSimplifyRational[MatMult[Normal[x],mat]], IdentityMatrix[3], "MatrixDecompositions", k++];

  (* LU Inverse *)

  mat = {{a,b},{0,d}};
  mati = NCLUInverse[mat];
  NCTest[NCSimplifyRational[MatMult[Normal[mati],mat]], IdentityMatrix[2], "MatrixDecompositions", k++];
  (* Print["mat ** inv[mat] = ", NCSimplifyRational[MatMult[Normal[mati], mat]]]; *)

  mat = {{a,0},{c,d}};
  mati = NCLUInverse[mat];
  NCTest[NCSimplifyRational[MatMult[Normal[mati],mat]], IdentityMatrix[2], "MatrixDecompositions", k++];
  (* Print["mat ** inv[mat] = ", NCSimplifyRational[MatMult[Normal[mati], mat]]]; *)

  mat = {{a,b},{c,d}};
  mati = NCLUInverse[mat];
  NCTest[NCSimplifyRational[MatMult[Normal[mati],mat]], IdentityMatrix[2], "MatrixDecompositions", k++];
  (* Print["mat ** inv[mat] = ", NCSimplifyRational[MatMult[Normal[mati], mat]]]; *)

  mat = {{a,b,0},{0,c,d},{0,e,f}};
  mati = NCLUInverse[mat];
  NCTest[NCSimplifyRational[MatMult[Normal[mati],mat]], IdentityMatrix[3], "MatrixDecompositions", k++];
  (* Print["mat ** inv[mat] = ", NCSimplifyRational[MatMult[Normal[mati], mat]]]; *)

];

