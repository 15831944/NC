<< MatrixDecompositions`

Module[
  {k,A1,A2,A3,A4,A5,
   l,u,p,q,rank,
   m,n,mMIN,mMAX,mINC,nMIN,nMAX,nINC,range,A},

  k = 1;

  (* All answers should be zero or small *)

  A1 = {{3, 17, 10}, {2, 4, -2}, {6, 18, -12}};
  A2 = A1;
  A2[[3]] = A2[[1]] - A2[[2]];
  A3 = Join[A1, {{1}, {3}, {4}}, 2];
  A4 = A1[[All,{1,2}]];
  A5 = SparseArray[A1];

  {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A1];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[l1.u1], A1[[p, q]], "MatrixDecompositions", k++];
  NCTest[rank, 3, "MatrixDecompositions", k++];

  {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A2];
  {l, u} = GetLUMatrices[lu];
  NCTest[Normal[l.u], A2[[p, q]], "MatrixDecompositions", k++];
  NCTest[rank, 2, "MatrixDecompositions", k++];

  {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A3];
  {l, u} = GetLUMatrices[lu];
  NCTest[Normal[l.u], A3[[p, q]], "MatrixDecompositions", k++];
  NCTest[rank, 3, "MatrixDecompositions", k++];

  {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A4];
  {l, u} = GetLUMatrices[lu];
  NCTest[Normal[l.u], A4[[p, q]], "MatrixDecompositions", k++];
  NCTest[rank, 2, "MatrixDecompositions", k++];

  {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A5];
  {l, u} = GetLUMatrices[lu];
  NCTest[Normal[l.u], Normal[A5[[p, q]]], "MatrixDecompositions", k++];
  NCTest[rank, 3, "MatrixDecompositions", k++];
  NCTest[Normal[l], Normal[l1], "MatrixDecompositions", k++];
  NCTest[Normal[u], Normal[u1], "MatrixDecompositions", k++];
  NCTest[rank, 3, "MatrixDecompositions", k++];

  (* Full rank test *)
  mMIN = nMIN = 3;
  mMAX = nMAX = 30;
  mINC = nINC = 10;

  For[m = mMIN, m <= mMAX, m += mINC,
      For[n = nMIN, n <= mMAX, n += nINC,
          range = 10;
          A = RandomInteger[{-range,range}, {m,n}];

          {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A];
          {l, u} = GetLUMatrices[lu];
	  NCTest[Norm[l.u - A[[p, q]]], 0, "MatrixDecompositions", k++];
          (*
            Print["A(", m, ",", n, "),\trank = ", rank, 
                  "\tres = ", Norm[l.u - A[[p, q]]]
            ];
          *)
      ];
  ];

  (* Full rank test (sparse) *)
  mMIN = nMIN = 3;
  mMAX = nMAX = 30;
  mINC = nINC = 10;

  For[ m = mMIN, m <= mMAX, m += mINC,
      For[ n = nMIN, n <= nMAX, n += nINC,

          range = 10;
          A = SparseArray[RandomInteger[{-range,range}, {m,n}]];

          {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A];
          {l, u} = GetLUMatrices[lu];
	  NCTest[Norm[l.u - A[[p, q]]], 0, "MatrixDecompositions", k++];
	  NCTest[rank, Min[m,n], "MatrixDecompositions", k++];
          (* Print["A(", m, ",", n, "),\trank = ", rank, "\tres = ", Norm[l.u - A[[p, q]]]]; *)
      ];
  ];

  (* Full rank test (full) *)
  mMIN = nMIN = 3;
  mMAX = nMAX = 30;
  mINC = nINC = 10;

  For[ m = mMIN, m <= mMAX, m += mINC,
      For[ n = nMIN, n <= nMAX, n += nINC,

          range = 10;
          A = RandomInteger[{-range,range}, {m,n}];

          {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A];
          {l, u} = GetLUMatrices[lu];
	  NCTest[Norm[l.u - A[[p, q]]], 0, "MatrixDecompositions", k++];
	  NCTest[rank, Min[m,n], "MatrixDecompositions", k++];
          (* Print["A(", m, ",", n, "),\trank = ", rank, "\tres = ", Norm[l.u - A[[p, q]]]]; *)
      ];
  ];

  (* Low rank test (sparse) *)
  mMIN = nMIN = 4;
  mMAX = nMAX = 30;
  mINC = nINC = 10;

  For[ m = mMIN, m <= mMAX, m += mINC,
      For[ n = nMIN, n <= nMAX, n += nINC,
 
          range = 10;
 	  A = SparseArray[RandomInteger[{-range,range}, {m,n}]];

          (* Reduce rank *)
          If [n >= m
	     , 
             A[[m]] = A[[m-2]] - A[[m-3]];
    	     A[[m-1]] = A[[m-2]] + A[[m-3]];
	     ,
             A[[All,n]] = A[[All,n-2]] - A[[All,n-3]];
    	     A[[All,n-1]] = A[[All,n-2]] + A[[All,n-3]];
          ];

    	  {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A];
    	  {l, u} = GetLUMatrices[lu];
	  NCTest[Norm[l.u - A[[p, q]]], 0, "MatrixDecompositions", k++];
	  NCTest[rank, Min[m,n] - 2, "MatrixDecompositions", k++];
          (* Print["A(", m, ",", n, "), \trank = ", rank, \
                   "\tres = ", Norm[l.u - A[[p, q]]] ]; *)
      ];
  ];

  (* Low rank test (full) *)
  mMIN = nMIN = 4;
  mMAX = nMAX = 30;
  mINC = nINC = 10;

  For[ m = mMIN, m <= mMAX, m += mINC,
      For[ n = nMIN, n <= nMAX, n += nINC,
 
          range = 10;
 	  A = RandomInteger[{-range,range}, {m,n}];

          (* Reduce rank *)
          If [n >= m
	     , 
             A[[m]] = A[[m-2]] - A[[m-3]];
    	     A[[m-1]] = A[[m-2]] + A[[m-3]];
	     ,
             A[[All,n]] = A[[All,n-2]] - A[[All,n-3]];
    	     A[[All,n-1]] = A[[All,n-2]] + A[[All,n-3]];
          ];

    	  {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A];
    	  {l, u} = GetLUMatrices[lu];
	  NCTest[Norm[l.u - A[[p, q]]], 0, "MatrixDecompositions", k++];
	  NCTest[rank, Min[m,n] - 2, "MatrixDecompositions", k++];
          (* Print["A(", m, ",", n, "), \trank = ", rank, \
                   "\tres = ", Norm[l.u - A[[p, q]]] ]; *)
      ];
  ];

];

