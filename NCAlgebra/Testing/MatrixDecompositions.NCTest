<< MatrixDecompositions`

Module[
  {k,A1,A2,A3,A4,A5,
   l,u,p,q,rank,b,x,B,
   m,n,mMIN,mMAX,mINC,nMIN,nMAX,nINC,range,A},

  k = 1;

  (* All answers should be zero or small *)

  A1 = {{3, 17, 10}, {2, 4, -2}, {6, 18, -12}};
  l = {{1, 0, 0}, {1/2, 1, 0}, {1/3, -1/4, 1}};
  u = {{6, 18, -12}, {0, 8, 16}, {0, 0, 6}};
  b = {1,2,3};

  A2 = A1;
  A2[[3]] = A2[[1]] - A2[[2]];
  A3 = Join[A1, {{1}, {3}, {4}}, 2];
  A4 = A1[[All,{1,2}]];
  A5 = SparseArray[A1];

  (* Partial Pivoting *)
  NCTest[LUPartialPivoting[A1[[All,1]]], 3, "MatrixDecompositions", k++];
  NCTest[LUPartialPivoting[A1[[All,2]]], 3, "MatrixDecompositions", k++];
  NCTest[LUPartialPivoting[A1[[All,3]]], 3, "MatrixDecompositions", k++];

  NCTest[LUPartialPivoting[A1[[1]]], 2, "MatrixDecompositions", k++];
  NCTest[LUPartialPivoting[A1[[2]]], 2, "MatrixDecompositions", k++];
  NCTest[LUPartialPivoting[A1[[3]]], 2, "MatrixDecompositions", k++];

  NCTest[LUPartialPivoting[A5[[All,1]]], 3, "MatrixDecompositions", k++];
  NCTest[LUPartialPivoting[A5[[All,2]]], 3, "MatrixDecompositions", k++];
  NCTest[LUPartialPivoting[A5[[All,3]]], 3, "MatrixDecompositions", k++];

  NCTest[LUPartialPivoting[A5[[1]]], 2, "MatrixDecompositions", k++];
  NCTest[LUPartialPivoting[A5[[2]]], 2, "MatrixDecompositions", k++];
  NCTest[LUPartialPivoting[A5[[3]]], 2, "MatrixDecompositions", k++];

  NCTest[LUPartialPivoting[A1], 3, "MatrixDecompositions", k++];
  NCTest[LUPartialPivoting[A5], 3, "MatrixDecompositions", k++];

  (* Complete Pivoting *)
  NCTest[LUCompletePivoting[A1], {3,2}, "MatrixDecompositions", k++];
  NCTest[LUCompletePivoting[A1[[1;;2,2;;3]]], {1,1}, "MatrixDecompositions", k++];
  NCTest[LUCompletePivoting[A1[[2;;3,1;;2]]], {2,2}, "MatrixDecompositions", k++];

  NCTest[LUCompletePivoting[A5], {3,2}, "MatrixDecompositions", k++];
  NCTest[LUCompletePivoting[A5[[1;;2,2;;3]]], {1,1}, "MatrixDecompositions", k++];
  NCTest[LUCompletePivoting[A5[[2;;3,1;;2]]], {2,2}, "MatrixDecompositions", k++];

  NCTest[LUCompletePivoting[A1], {3,2}, "MatrixDecompositions", k++];
  NCTest[LUCompletePivoting[A5], {3,2}, "MatrixDecompositions", k++];

  (* LU with partial pivoting *)
  {lu, p} = LUDecompositionWithPartialPivoting[A1];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[l1.u1], A1[[p]], "MatrixDecompositions", k++];
  NCTest[Norm[l1 - l], 0, "MatrixDecompositions", k++];
  NCTest[Norm[u1 - u], 0, "MatrixDecompositions", k++];

  {lu, p} = LUDecompositionWithPartialPivoting[A2];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[l1.u1], A2[[p]], "MatrixDecompositions", k++];

  {lu, p} = LUDecompositionWithPartialPivoting[A3];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[l1.u1], A3[[p]], "MatrixDecompositions", k++];

  {lu, p} = LUDecompositionWithPartialPivoting[A4];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[l1.u1], A4[[p]], "MatrixDecompositions", k++];

  {lu, p} = LUDecompositionWithPartialPivoting[A5];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[l1.u1], Normal[A5[[p]]], "MatrixDecompositions", k++];

  (* LU with complete pivoting *)

  {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A1];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Normal[l1.u1], A1[[p, q]], "MatrixDecompositions", k++];
  NCTest[rank, 3, "MatrixDecompositions", k++];

  {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A2];
  {l, u} = GetLUMatrices[lu];
  NCTest[Normal[l.u], A2[[p, q]], "MatrixDecompositions", k++];
  NCTest[rank, 2, "MatrixDecompositions", k++];

  {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A3];
  {l, u} = GetLUMatrices[lu];
  NCTest[Normal[l.u], A3[[p, q]], "MatrixDecompositions", k++];
  NCTest[rank, 3, "MatrixDecompositions", k++];

  {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A4];
  {l, u} = GetLUMatrices[lu];
  NCTest[Normal[l.u], A4[[p, q]], "MatrixDecompositions", k++];
  NCTest[rank, 2, "MatrixDecompositions", k++];

  {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A5];
  {l, u} = GetLUMatrices[lu];
  NCTest[Normal[l.u], Normal[A5[[p, q]]], "MatrixDecompositions", k++];
  NCTest[rank, 3, "MatrixDecompositions", k++];
  NCTest[Normal[l], Normal[l1], "MatrixDecompositions", k++];
  NCTest[Normal[u], Normal[u1], "MatrixDecompositions", k++];
  NCTest[rank, 3, "MatrixDecompositions", k++];

  (* Full rank test *)
  mMIN = nMIN = 3;
  mMAX = nMAX = 30;
  mINC = nINC = 10;

  For[m = mMIN, m <= mMAX, m += mINC,
      For[n = nMIN, n <= mMAX, n += nINC,

          range = 10;
          A = RandomInteger[{-range,range}, {m,n}];

          {lu, p} = LUDecompositionWithPartialPivoting[A];
          {l1, u1} = GetLUMatrices[lu];
	  NCTest[Norm[l1.u1 - A[[p]]], 0, "MatrixDecompositions", k++];

          {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A];
          {l1, u1} = GetLUMatrices[lu];
	  NCTest[Norm[l1.u1 - A[[p, q]]], 0, "MatrixDecompositions", k++];

          A = SparseArray[A];

          {lu, p} = LUDecompositionWithPartialPivoting[A];
          {l1, u1} = GetLUMatrices[lu];
	  NCTest[Norm[l1.u1 - A[[p]]], 0, "MatrixDecompositions", k++];

          {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A];
          {l1, u1} = GetLUMatrices[lu];
	  NCTest[Norm[l1.u1 - A[[p, q]]], 0, "MatrixDecompositions", k++];
	  NCTest[rank, Min[m,n], "MatrixDecompositions", k++];

      ];
  ];

  (* Low rank test (sparse) *)
  mMIN = nMIN = 4;
  mMAX = nMAX = 30;
  mINC = nINC = 10;

  For[ m = mMIN, m <= mMAX, m += mINC,
      For[ n = nMIN, n <= nMAX, n += nINC,
 
          range = 10;
 	  A = RandomInteger[{-range,range}, {m,n}];

          (* Reduce rank *)
          If [n >= m
	     , 
             A[[m]] = A[[m-2]] - A[[m-3]];
    	     A[[m-1]] = A[[m-2]] + A[[m-3]];
	     ,
             A[[All,n]] = A[[All,n-2]] - A[[All,n-3]];
    	     A[[All,n-1]] = A[[All,n-2]] + A[[All,n-3]];
          ];

          {lu, p} = LUDecompositionWithPartialPivoting[A];
          {l1, u1} = GetLUMatrices[lu];
	  NCTest[Norm[l1.u1 - A[[p]]], 0, "MatrixDecompositions", k++];

    	  {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A];
    	  {l1, u1} = GetLUMatrices[lu];
	  NCTest[Norm[l1.u1 - A[[p, q]]], 0, "MatrixDecompositions", k++];
	  NCTest[rank, Min[m,n] - 2, "MatrixDecompositions", k++];

 	  A = SparseArray[A];

          {lu, p} = LUDecompositionWithPartialPivoting[A];
          {l1, u1} = GetLUMatrices[lu];
	  NCTest[Norm[l1.u1 - A[[p]]], 0, "MatrixDecompositions", k++];

    	  {lu, p, q, rank} = LUDecompositionWithCompletePivoting[A];
    	  {l1, u1} = GetLUMatrices[lu];
	  NCTest[Norm[l1.u1 - A[[p, q]]], 0, "MatrixDecompositions", k++];
	  NCTest[rank, Min[m,n] - 2, "MatrixDecompositions", k++];

      ];
  ];

  (* back/forward substitution *)
  x = UpperTriangularSolve[u, b];
  NCTest[Norm[u.x - b], 0, "MatrixDecompositions", k++];

  x = LowerTriangularSolve[l, b];
  NCTest[Norm[l.x - b], 0, "MatrixDecompositions", k++];

  B = Transpose[{b}];
  x = UpperTriangularSolve[u, B];
  NCTest[Norm[u.x - B], 0, "MatrixDecompositions", k++];

  x = LowerTriangularSolve[l, B];
  NCTest[Norm[l.x - B], 0, "MatrixDecompositions", k++];

  B = Transpose[{b,-b+2}];
  x = UpperTriangularSolve[u, B];
  NCTest[Norm[u.x - B], 0, "MatrixDecompositions", k++];

  x = LowerTriangularSolve[l, B];
  NCTest[Norm[l.x - B], 0, "MatrixDecompositions", k++];

  (* Singular *)
  A = {{1,1},{2,2}};
  b = {1,2};

  {lu, p} = LUDecompositionWithPartialPivoting[A];
  {l1, u1} = GetLUMatrices[lu];
  NCTest[Norm[l1.u1 - A[[p]]], 0, "MatrixDecompositions", k++];

  (*
  x = UpperTriangularSolve[u1, b];
  NCTest[Norm[u1.x - b], 0, "MatrixDecompositions", k++];
  *)

  A = {{1,2},{2,1}};
  B = LUInverse[A];
  NCTest[Norm[A . B - IdentityMatrix[2]], 0, "MatrixDecompositions", k++];

  B = LUInverse[A1];
  NCTest[Norm[A1 . B - IdentityMatrix[3]], 0, "MatrixDecompositions", k++];

  (* Inverse test *)
  mMIN = 3;
  mMAX = 30;
  mINC = 10;

  For[ m = mMIN, m <= mMAX, m += mINC,
     range = 10;
     A = RandomInteger[{-range,range}, {m,m}];

     B = LUInverse[A];
     NCTest[Norm[A . B - IdentityMatrix[m]], 0, "MatrixDecompositions", k++];

     A = SparseArray[A];

     B = LUInverse[A];
     NCTest[Norm[A . B - IdentityMatrix[m]], 0, "MatrixDecompositions", k++];

  ];

  (* Inverse test *)
  mMIN = 4;
  mMAX = 30;
  mINC = 10;

  For[ m = mMIN, m <= mMAX, m += mINC,

     range = 10;
     A = RandomInteger[{-range,range}, {m,m}];

     (* Reduce rank *)
     A[[m]] = A[[m-2]] - A[[m-3]];

     singular = False;
     Quiet[
       Check[B = LUInverse[A];
             ,
             singular = True;
    	     ,
             MatrixDecompositions::Singular
       ];
       ,
       {MatrixDecompositions::Singular,
        Divide::infy,Divide::indet,Infinity::indet}
     ];
     NCTest[singular, True, "MatrixDecompositions", k++];

     A = SparseArray[A];

     singular = False;
     Quiet[
       Check[B = LUInverse[A];
             ,
             singular = True;
    	     ,
             MatrixDecompositions::Singular
       ];
       ,
       {MatrixDecompositions::Singular,
        Divide::infy,Divide::indet,Infinity::indet}
     ];
     NCTest[singular, True, "MatrixDecompositions", k++];

  ];

];