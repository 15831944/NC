Module[
  {k, test, expr, a, b, c, d},

  k = 1;
  test = "Transposes";

  SetNonCommutative[a, b, c, d];

  NCTest[CommutativeQ[tp], False, test, k++];

  NCTest[tp[0], 0, test, k++];
  NCTest[tp[1], 1, test, k++];
  NCTest[tp[Pi], Pi, test, k++];
  NCTest[tp[I], I, test, k++];
  NCTest[tp[1 + I], 1 + I, test, k++];

  NCTest[tp[2 a], 2 tp[a], test, k++];
  NCTest[tp[3 a ** b], Unevaluated[3 tp[b] ** tp[a]], test, k++];
  NCTest[tp[(3 + I) a ** b], Unevaluated[Complex[3,1] tp[b] ** tp[a]], test, k++];

  expr = tp[a+b];
  NCTest[expr, Unevaluated[tp[a] + tp[b]], test, k++];

  expr = tp[2 a + 3 b];
  NCTest[expr, Unevaluated[2 tp[a] + 3 tp[b]], test, k++];

  expr = tp[a**b];
  NCTest[expr, Unevaluated[tp[b] ** tp[a]], test, k++];

  expr = tp[b]**tp[a];
  NCTest[expr, Unevaluated[tp[b] ** tp[a]], test, k++];

  expr = c**tp[a**b];
  NCTest[expr, Unevaluated[c ** tp[b] ** tp[a]], test, k++];

  expr = tp[a**b]**d;
  NCTest[expr, Unevaluated[tp[b] ** tp[a] ** d], test, k++];

  expr = c**tp[a**b]**d;
  NCTest[expr, Unevaluated[c ** tp[b] ** tp[a] ** d], test, k++];

  (* NCSymmetricQ *)

  expr = a + tp[a];
  NCTest[NCSymmetricQ[expr], True, test, k++];

  expr = a ** b + tp[a ** b];
  NCTest[NCSymmetricQ[expr], True, test, k++];

  expr = a;
  NCTest[NCSymmetricQ[expr], False, test, k++];

  expr = a - tp[a];
  NCTest[NCSymmetricQ[expr], False, test, k++];

  (* NCSymmetricQ[#, False] *)

  Quiet[

    expr = a + tp[a];
    NCTest[NCSymmetricQ[expr, False], True, test, k++];

    expr = a ** b + tp[a ** b];
    NCTest[NCSymmetricQ[expr, False], True, test, k++];

    expr = a;
    NCTest[NCSymmetricQ[expr, False], True, test, k++];

    expr = a + b;
    NCTest[NCSymmetricQ[expr, False], True, test, k++];

    expr = a + b ** c;
    NCTest[NCSymmetricQ[expr, False], False, test, k++];

    expr = a + b ** c + c ** b;
    NCTest[NCSymmetricQ[expr, False], True, test, k++];

    expr = a + tp[b] ** c + c ** b;
    NCTest[NCSymmetricQ[expr, False], True, test, k++];

    expr = a + b + tp[b] ** c + c ** b;
    NCTest[NCSymmetricQ[expr, False], False, test, k++];

    expr = a + b ** tp[b] + tp[b] ** c + c ** b;
    NCTest[NCSymmetricQ[expr, False], True, test, k++];

    ,
    NCSymmetricQ::SymmetricVariables
  ];

];