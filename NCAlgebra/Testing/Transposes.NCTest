Module[
  {k, expr, a, b, c, d},

  k = 1;

  SetNonCommutative[a, b, c, d];

  NCTest[CommutativeQ[tp], False, "Transposes", k++];

  NCTest[tp[0], 0, "Transposes", k++];
  NCTest[tp[1], 1, "Transposes", k++];
  NCTest[tp[Pi], Pi, "Transposes", k++];
  NCTest[tp[I], I, "Transposes", k++];
  NCTest[tp[1 + I], 1 + I, "Transposes", k++];

  NCTest[tp[2 a], 2 tp[a], "Transposes", k++];
  NCTest[tp[3 a ** b], Unevaluated[3 tp[b] ** tp[a]], "Transposes", k++];
  NCTest[tp[(3 + I) a ** b], Unevaluated[Complex[3,1] tp[b] ** tp[a]], "Transposes", k++];

  expr = tp[a+b];
  NCTest[expr, Unevaluated[tp[a] + tp[b]], "Transposes", k++];

  expr = tp[2 a + 3 b];
  NCTest[expr, Unevaluated[2 tp[a] + 3 tp[b]], "Transposes", k++];

  expr = tp[a**b];
  NCTest[expr, Unevaluated[tp[b] ** tp[a]], "Transposes", k++];

  expr = tp[b]**tp[a];
  NCTest[expr, Unevaluated[tp[b] ** tp[a]], "Transposes", k++];

  expr = c**tp[a**b];
  NCTest[expr, Unevaluated[c ** tp[b] ** tp[a]], "Transposes", k++];

  expr = tp[a**b]**d;
  NCTest[expr, Unevaluated[tp[b] ** tp[a] ** d], "Transposes", k++];

  expr = c**tp[a**b]**d;
  NCTest[expr, Unevaluated[c ** tp[b] ** tp[a] ** d], "Transposes", k++];

];