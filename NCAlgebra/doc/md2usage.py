import enum
import getopt
import sys
import re
import os
import subprocess
import datetime

def usage():
    print('md2usage')
    print("""usage: md2usage [option] filename...
Options are:
-H arg : set command heading level        (default '##')
-h     : print this help message and exit
-o arg : output file name                 (default stdout)
""")

class State(enum.Enum):
     idle = 0
     scanning = 1

def main():

    # Parse command line
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hH:o:", ["help"])

    except getopt.GetoptError as err:
        # print help information and exit:
        print('server: illegal option {}'.format(sys.argv[1:]))
        usage()
        sys.exit(2)

    HEADING = '##'
    CONVERT = ['pandoc', '-t', 'plain', '--wrap=none']
    outfile = None

    for o, a in opts:
        if o in ("-h", "--help"):
            usage()
            sys.exit()
        elif o == "-H":
            HEADING = a
        elif o == "-o":
            outfile = a
        else:
            assert False, "unhandled option"

    # patterns
    heading_pattern = re.compile(HEADING + "\s*(\w+)");
    name_pattern = re.compile(r"(<a\s)|(</a>)");

    # filename
    filename = args[0]

    # function dictionary
    functions = {};

    # Read file
    with open(filename, 'r') as f:
        mode = State.idle
        function = ""
        body = ""
        for line in f:
            # match name pattern
            if re.match(name_pattern, line) is not None:
                # ignore
                continue

            # match heading pattern
            match = re.match(heading_pattern, line)
            if match is not None:
                if mode == State.scanning:
                    # finished function
                    functions[function] = body
                elif mode == State.idle:
                    # go into scanning mode
                    mode = State.scanning
                # retrieve function name
                function = match.group(1)
                # reset body
                body = ""
            else:
                body += line

    # produce output file
    fsock = None
    if outfile:
        fsock = open(outfile, 'w')
        # add header
        now = datetime.datetime.now()
        print("""\
(*************************************************************************
 *         This file was automatically generated by md2usage.py          *
 *                   on {}                       *
 *************************************************************************)
""".format(now), file = fsock)

    # print functions
    for key, value in functions.items():
        # process body
        proc = subprocess.Popen(CONVERT,        
                                stdin=subprocess.PIPE,
                                stdout=subprocess.PIPE)
        output = proc.communicate(value.encode('utf-8'))[0].decode('utf-8')
        
        # protect quotes
        output = output.replace('"', '\\"')

        # print comment
        print('\n(* ' + key + ' *)', file=fsock)

        # print usage statement
        print(key + '::usage = "\\\n' + output.strip() + '";', file=fsock)

    if outfile:
        fsock.close()

if __name__ == "__main__":
    main()
