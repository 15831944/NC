<< Sylvester`
<< SDPSylvester`
<< Kronecker`

Module[
  {test, k, exp, answer,
   A,B,Q,
   AA,BB,CC,
   AAv,BBv,CCv, y,
   Y,syms,tmp,
   X1,XX1,
   Y1,Y11,
   dims,
   H11,
   XX2,XX3,
   n,m,Id,Ze,Idm,Zemm,Zenm,Idx,IdW,Zenpm,
   X,L,W
   },

  k = 1;
  test = "NCSylvester2";

  (* Test #1: Full *)

  (* A' Y B' + B Y A *)

  A={{-1,1},{0,-2}};
  B={{2,1},{1,2}};
  Q=IdentityMatrix[2];

  AA={
  { 
  {ArrayFlatten[{{Transpose[A],B}}],ArrayFlatten[{{Transpose[B],A}}]}
  }
  };
  CC={-Q};
  BB={IdentityMatrix[2]};

  Y={{1,3},{3,2}};
  syms = {True};

  (* Vectorize symmetric *)

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}, SymmetricVariables -> {1}];
  
  answer = {{{{-4, 1}, {1, 2}}}, {{{-2, -5}, {-5, 0}}}, {{{0, -2}, {-2, -8}}}};
  exp = Total[AAv - answer, Infinity];
  NCTest[exp, 0, test, k++];

  answer = {{{1, 0, 1}}};
  exp = Total[BBv - answer, Infinity];
  NCTest[exp, 0, test, k++];


  (* Vectorize non symmetric *)

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}];
  
  answer = CC;
  exp = Total[CCv - answer, Infinity];
  NCTest[exp, 0, test, k++];

  answer = {{{{-4, 1}, {1, 2}}}, {{{-1, -5/2}, {-5/2, 0}}}, {{{-1, -5/2}, {-5/2, 0}}}, {{{0, -2}, {-2, -8}}}};
  exp = Total[AAv - answer, Infinity];
  NCTest[exp, 0, test, k++];

  answer = {{{1, 0, 0, 1}}};
  exp = Total[BBv - answer, Infinity];
  NCTest[exp, 0, test, k++];

  answer = CC;
  exp = Total[CCv - answer, Infinity];
  NCTest[exp, 0, test, k++];

  (* Eval *)

  y = ToVector[Y];
  answer = SDPPrimalEval[AAv, y];
  X1 = SylvesterPrimalEval[AA,{Y}];

  exp = Total[X1-answer, Infinity];
  NCTest[exp, 0, test, k++];

  {XX1}=X1;

  answer = SDPDualEval[AAv, X1];
  Y1=SylvesterDualEval[AA,{XX1},syms];

  exp = Total[ToVector[Y1[[1]]]-answer, Infinity];
  NCTest[exp, 0, test, k++];
  
  X11 = MapThread[Dot, {X1,X1}];

  answer=SDPSylvesterEval[AAv,X11];

  dims=Map[Dimensions,{Y}];
  H1=SylvesterSylvesterVecEval[AA,X11,dims,syms];

  exp = Total[H1-answer, Infinity];
  NCTest[exp, 0, test, k++];


  (* Test #2: Not symmetric mapping, not symmetric variable *)

  (* {Y,Transpose[A].Y.Transpose[B]+F.K,AA[[3,2,1]].K.AA[[3,2,2]]}; *)

  F={{3},{7}};
  K={{-1,2}};
  syms={True,False};

  AA={
  {
  {IdentityMatrix[2],IdentityMatrix[2]}
  ,
  {ConstantArray[0,{2,1}],ConstantArray[0,{2,2}]}
  }
  ,
  {
  {Transpose[A],Transpose[B]}
  ,
  {F,IdentityMatrix[2]}
  }
  ,
  {
  {ConstantArray[0,{3,2}],ConstantArray[0,{2,3}]}
  ,
  {{{0},{0},{1}},{{1,0,0},{0,1,0}}}
  }
  };
  CC={-Q,-Q};
  BB={IdentityMatrix[2], 0*K};

  (* Vectorize non symmetric *)

  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}];
  
  answer = CC;
  exp = Total[CCv - answer, Infinity];
  NCTest[exp, 0, test, k++];

  answer = {{{{1, 0}, {0, 0}}, {{-2, 1/2}, {1/2, 1}}, {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}}, {{{0, 1/2}, {1/2, 0}}, {{0, -2}, {-2, -2}}, {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}}, {{{0, 1/2}, {1/2, 0}}, {{-1, -1/2}, {-1/2, 2}}, {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}}, {{{0, 0}, {0, 1}}, {{0, -1}, {-1, -4}}, {{0, 0, 0}, {0, 0, 0}, {0, 0, 0}}}, {{{0, 0}, {0, 0}}, {{3, 7/2}, {7/2, 0}}, {{0, 0, 1/2}, {0, 0, 0}, {1/2, 0, 0}}}, {{{0, 0}, {0, 0}}, {{0, 3/2}, {3/2, 7}}, {{0, 0, 0}, {0, 0, 1/2}, {0, 1/2, 0}}}}; 
  exp = Total[AAv - answer, Infinity];
  NCTest[exp, 0, test, k++];

  answer = {{{1, 0, 0, 1, 0, 0}}};
  exp = Total[BBv - answer, Infinity];
  NCTest[exp, 0, test, k++];

  answer = CC;
  exp = Total[CCv - answer, Infinity];
  NCTest[exp, 0, test, k++];

  (* Eval *)

  y = Join[ToVector[Y], ToVector[K]];
  answer = SDPPrimalEval[AAv, y];
  X1=SylvesterPrimalEval[AA,{Y,K}];

  exp = Total[X1-answer, Infinity];
  NCTest[exp, 0, test, k++];

  {XX1,XX2,XX3}=X1;

  (* {XX1+A.XX2.B,Transpose[F].XX2+Transpose[AA[[3,2,1]]].XX3.Transpose[AA[[3,2,2]]]}; *)
  answer = SDPDualEval[AAv, X1];
  Y1=SylvesterDualEval[AA,{XX1,XX2,XX3},syms];

  exp = Total[Join[ToVector[Y1[[1]]], ToVector[Y1[[2]]]]-answer, Infinity];
  NCTest[exp, 0, test, k++];

  X11 = MapThread[Dot, {X1,X1}];

  answer=SDPSylvesterEval[AAv,X11];

  dims=Map[Dimensions,{Y,K}];
  H1=SylvesterSylvesterVecEval[AA,X11,dims,syms];

  exp = Total[H1-answer, Infinity];
  NCTest[exp, 0, test, k++];

  (* Riccati *)

  n=2;
  m=2;

  Id = IdentityMatrix[n];
  A = RandomReal[{-10,10},{n,n}];
  B = RandomReal[{-10,10},{n,m}];
  Ze = ConstantArray[0,{n,n}];

  Idm = IdentityMatrix[m];
  Zemm = ConstantArray[0,{m,m}];
  Zenm = ConstantArray[0,{n,m}];
  IdX = ArrayFlatten[{{Transpose[Zenm]},{Id}}];
  IdW = ArrayFlatten[{{Idm},{Zenm}}];
  Zenpm = ConstantArray[0,{n+m,n+m}];

  syms={True,False,True};

  AA={
  {{2 A,Id},{2B,Id},{Zenm,Transpose[Zenm]}},(* A X + B L < 0*)
  {{-2 IdX,Transpose[IdX]},{-2 IdW,Transpose[IdX]},{-2 IdW,Transpose[IdW]}} (* -[W, L; L^T X] < 0 *)
  };
  CC={-Id,Zenpm};
  BB={Ze,Transpose[Zenm],-Idm};

  (* Vectorize non symmetric *)
  {AAv,BBv,CCv} = SylvesterToVectorizedSDP[{AA,BB,CC}];

  X=RandomReal[{-10,10},{n,n}];
  X = X + Transpose[X];
  L=RandomReal[{-10,10},{m,n}];
  W=RandomReal[{-10,10},{m,m}];
  W = W + Transpose[W];

  dims=Map[Dimensions,{X,L,W}];

  (* 2 {A.X + B.L, -ArrayFlatten[{{W, L},{0*Transpose[L], X}}]}; *)
  y = Join[ToVector[X], ToVector[L], ToVector[W]];
  answer = SDPPrimalEval[AAv, y];
  X1=SylvesterPrimalEval[AA,{X,L,W}];

  exp = Total[X1-answer, Infinity];
  NCTest[exp < 10^(-9), True, test, k++];

  {XX1, XX2}=X1;

  (* 2 {Transpose[A].XX1-XX2[[3;;5,3;;5]], Transpose[B].XX1-XX2[[1;;2,3;;5]], -XX2[[1;;2,1;;2]]}; *)
  answer = SDPDualEval[AAv, X1];
  Y1=SylvesterDualEval[AA,{XX1,XX2},syms];

  exp = Total[Join[ToVector[Y1[[1]]], ToVector[Y1[[2]]], ToVector[Y1[[3]]]]-answer, Infinity];
  NCTest[exp < 10^(-9), True, test, k++];

  X11 = MapThread[Dot, {X1,X1}];

  answer=SDPSylvesterEval[AAv,X11];

  H1=SylvesterSylvesterVecEval[AA,X11,dims,syms];

  exp = Total[H1-answer, Infinity];
  NCTest[exp < 10^(-3), True, test, k++];

];

